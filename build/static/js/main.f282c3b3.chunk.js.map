{"version":3,"sources":["Utils/VisibilityListener.js","Components/ActionButton.js","Components/CommandDisplay.js","Components/CommandGroup.js","Components/EditableSetting.js","Components/SettingsGroup.js","DeviceTypes/TasmotaDevice.js","Utils/CopyToClipboard.js","Components/DeviceList.js","Components/DisplayModeButtons.js","Screens/Devices.js","DeviceTypes/TasmotaDeviceConnector.js","Configuration/TasmotaConfig-6.7.0.0.js","Configuration/TasmotaConfig-7.1.2.0.js","Configuration/TasmotaVersionedConfig.js","DeviceManagement/DeviceManager.js","Screens/DeviceDetails.js","Screens/DeviceSettings.js","Screens/FindDevices.js","Screens/Console.js","Configuration/AppConfig.js","App.js","index.js"],"names":["hidden","visibilityChange","ActionButton","display","this","props","icon","selected","selectedIcon","Tooltip","title","toolTip","style","visibility","IconButton","aria-label","label","onClick","event","onButtonClick","React","Component","CommandDisplay","commandSent","commandOptions","command","options","concat","unshift","description","type","defaultInputSelection","defaultOption","commandName","endsWith","indexed","inputRange","range","indexRange","split","i","push","state","commandIndex","selectedOption","valueToSend","commandToSend","generateCommand","logsOutput","currentSelectedInputRangeValue","currentSelectedCommand","generateCurrentCommand","deviceConnector","connect","disconnect","cmnd","success","response","log","JSON","stringify","addLog","stopPropagation","setState","newLog","Date","toLocaleTimeString","trim","performCommandOnDevice","sendCommandInternal","target","value","option","rangeValue","replace","arg","slashIndex","indexOf","substring","Box","flexDirection","flexGrow","paddingTop","width","height","px","List","dense","map","ListItem","key","role","undefined","button","onInputRangeItemSelected","ListItemIcon","Radio","checked","name","inputProps","ListItemText","id","primary","onOptionItemSelected","isCurrentSelectedOption","secondary","shouldShowValueInput","noValidate","autoComplete","TextField","rows","multiline","required","onChange","onValueInputChanged","margin","variant","onCommandInputChanged","Typography","TextareaAutosize","rowsMax","disabled","onClearLog","window","open","toLowerCase","ExpansionPanel","TransitionProps","unmountOnExit","mountOnEnter","ExpansionPanelSummary","expandIcon","aria-controls","alignItems","flexBasis","openHelp","alignSelf","color","ExpansionPanelDetails","flexWrap","whiteSpace","renderCommandDetails","Divider","ExpansionPanelActions","Button","size","sendCommand","CommandGroup","commandGroupName","groupType","Object","entries","commandGroup","sort","EditableSetting","enableEdit","currentValue","settingUpdatedCallback","classes","flexShrink","justifyContent","InputProps","disabledInput","Fragment","save","withStyles","theme","palette","text","SettingsGroup","pros","getCurrentSettings","isExpanded","settingsGroup","settings","forEach","setting","index","performCommandOnDeviceDirect","defaultStates","settingsStates","commandResponses","console","newState","assign","keys","toUpperCase","handleSettingsChanged","slice","groupName","renderSettingInputs","saveSettings","document","msHidden","webkitHidden","onWindowVisibilityChangedCallbacks","addEventListener","callback","addVisibilityChangeCallback","onWindowVisibilityChanged","removeVisibilityChangeCallback","splice","onButtonTheme","createMuiTheme","blue","powerRegex","RegExp","dimmerRegex","DimmerSlider","root","paddingBottom","paddingLeft","paddingRight","thumb","backgroundColor","border","marginTop","marginLeft","boxShadow","active","valueLabel","left","track","borderRadius","rail","Slider","templateGPIOIndex","templateFlagOptions","TasmotaDevice","deviceConfig","visibilityListener","bind","getPanelCommandData","macAddress","deviceInfo","dimmerAnchors","online","currentTemplate","currentModuleConfig","currentModuleType","pendingCommand","visible","resume","pause","nextProps","deviceManager","getDeviceConnector","getDevice","status0Response","StatusNET","IPAddress","getTasmotaConfig","templateResponse","VisibilityListener","updatedInfo","updateDevice","currentState","updateDeviceInfoState","startsWith","gpioResponse","gpioResponseFormatter","gpio255Response","gpiosResponse","modulesResponse","Module","status0Clone","status","param","StatusSNS","moduleResponse","wifiPowerResponse","dimmer","newValue","moduleParsed","moduleResponseParser","moduleNum","TableCell","component","scope","fontSize","Status","FriendlyName","actionButtons","TableRow","renderTypeTableFriendlyNameCell","renderConnectivityStatus","getModuleDisplayText","flex","renderDetailsControlsButtons","renderDetailsControlsDimmers","StatusSTS","Wifi","RSSI","Uptime","MqttCount","LinkCount","Downtime","StatusFWR","Version","Core","StatusPRM","BootCount","RestartReason","LoadAvg","Sleep","WifiPower","BSSId","Hostname","Mac","Gateway","SSId","Channel","Topic","GroupTopic","StatusMQT","MqttHost","MqttPort","MqttClient","SDK","StatusMEM","ProgramSize","Free","OtaUrl","src","padding","buttons","filter","test","ThemeProvider","powerToggle","newAnchors","dimmers","openDimmerPopover","Popover","Boolean","anchorEl","onClose","dimmerPopoverClosed","anchorOrigin","vertical","horizontal","transformOrigin","defaultValue","aria-labelledby","valueLabelDisplay","step","min","max","onChangeCommitted","dimmerUpdate","cmndData","Table","TableHead","TableBody","align","bytesString","bitArray","digitValue","char","n","reverse","renderDetailsSetOptionsListItems","setOption","StatusLOG","SetOption","setOptionStr","valueArray","convertHexStringToBitArray","setOptionsStatusMaps","items","item","itemIndex","soValue","setOptionStart","ListItemSecondaryAction","Checkbox","edge","changeSetOption","availableGPIOs","gpioNum","gpioName","gpio","length","Array","isArray","toString","gpioindex","newTemplate","GPIO","parseInt","oldName","newName","NAME","FLAG","BASE","availableModules","moduleName","onTemplateNameUpdated","FormControl","Select","labelId","onTemplateGPIOChanged","getAvailableGPIOS","availableGPIO","MenuItem","onTemplateFlagChanged","templateFlag","onTemplateBaseChanged","getAvailableModules","mod","setTimeout","isTemplateRenderable","renderTemplateResponse","CircularProgress","resetTemplate","saveTemplate","gpioObj","gpioDeviceType","gpioDeviceName","newConfig","request","performRequestOnDevice","moduleType","moduleConfig","onModuleTypeChanged","isModuleConfigurationRenderable","renderGPIOConfiguration","resetModuleConfiguration","saveModuleConfiguration","renderGPIOResponse","settingsGroups","colSpan","renderDetailsSetOptions","renderModuleConfiguration","renderDetailsTemplate","configuration","commands","renderDetailsConnectivity","renderDetailsGPIO","el","createElement","setAttribute","position","body","appendChild","select","execCommand","removeChild","copyToClipboard","renderDetailsStatuses","renderType","justifyItems","Paper","renderDetailsImage","onFriendlyNameUpdatedCallback","renderTypeDetails","renderTypeSettings","renderTypeList","renderTypeSettingsAndDetails","renderTypeTableStatusRow","renderTypeTableHealthRow","renderTypeTableWifiRow","renderTypeTableMqttRow","renderTypeTableFirmwareRow","imageContainer","spacing","detailsContainer","DeviceList","displayMode","renderTypeTable","renderTypeCard","devices","mac","renderButton","openDeviceDetails","deleteDevice","renderTableHeaderStatus","renderTableHeaderHealth","renderTableHeaderWifi","renderTableHeaderMqtt","renderTableHeaderFirmware","stickyHeader","deviceSections","section","renderTableHeader","itemButtons","renderItems","DisplayModeButtons","Devices","openDeviceSettings","openDeviceConsole","openWebUI","history","ip","removeDevice","newDevices","getDevices","appConfig","getAppConfig","prevProps","prevState","snapshot","putAppConfig","gtag","overflow","TasmotaDeviceConnector","ipAddress","authInfo","deviceIPAddress","deviceListeners","timer","requestDeviceStatus","listener","clearInterval","setInterval","getStatus0","getState","args","url","deviceListener","onDeviceRequestResponse","onCommandResponse","getStatus8","getModule","getWifiPower","performRequestOnDeviceDirect","encodeURIComponent","username","password","runtimeConfig","proxyMode","superagent","get","timeout","deadline","end","err","error","TasmotaConfig_06070000","structName","bitSize","moduleParts","parsed","gpioInfo","Commands","ButtonDebounce","Control","ButtonRetain","MQTT","SetOption11","SetOptions","SetOption13","SetOption32","SetOption40","SetOption61","Switch","SwitchDebounce","SwitchRetain","Relay","BlinkCount","BlinkTime","PowerOnState","PowerRetain","Interlock","SetOption0","SetOption26","SetOption63","TasmotaConfig_07010200","commandType","SetOption77","WiFi","CORS","updatedConfig","TasmotaVersionedConfig","getConfigurationForVersion","version","versions","closestVersion","maximumVersion","availableVersion","substr","DeviceManager","deviceConnectors","localStorage","parse","getItem","discoveredDevices","oldInfo","saveDevices","versionStr","versionNumbers","setItem","updateDeviceConnector","deviceMac","updateIpAddress","disconnectAll","DeviceDetails","match","params","FindDevices","ipsToScan","ipsRequested","handleIPFromChange","ipFrom","nets","to","ipTo","calculateTotalIPs","handleIPToChange","addDevice","getDiscoveredDevices","commonButtons","knownDeviceButtons","newDeviceButtons","totalAddresses","numIpsRequested","numIpsCompleted","searching","enableAuth","enableCorsAutomatically","from","Address4","bigInteger","addDiscoveredDevice","WARNING","enqueueSnackbar","scanIps","shift","enableCorsAndSendRequest","sendRequest","location","protocol","hostname","port","res","obj","ipNum","fromBigInteger","correctForm","discoveredDevicesMacs","isDeviceKnown","reduce","knownDevices","placeholder","handleStopClicked","handleFindClicked","FormControlLabel","control","onEnableCorsAutomaticallyChanged","labelPlacement","onAuthEnableChanged","LinearProgress","valueBuffer","withSnackbar","Console","deviceName","webLogEnabled","weblogLevel","terminal","createRef","commandFired","WebLog","current","terminalInput","processCommand","line","rootNode","terminalRoot","scrolledUp","scrollTop","scrollHeight","clientHeight","pushToStdout","scrollToBottom","fireCommand","startWebLog","stopWebLog","nextCommanNumber","encodeURI","data","lines","lastIndexOf","usage","fn","generateCommands","requestLog","string","p1","p2","offset","weblogEnabled","onWegLogEnableChanged","clearStdout","sendConsoleCommand","InputLabel","onWebLogLevelChanged","className","ref","welcomeMessage","promptLabel","toCamelCase","AppConfig","appSessionConfig","sessionStorage","saveSessionConfig","saveAppConfig","mainMenuItems","link","App","children","child","nested","listItems","renderChildItems","CssBaseline","AppBar","appBar","Toolbar","noWrap","Drawer","drawer","paper","drawerPaper","anchor","toolbar","process","versionNumber","versionName","content","exact","path","render","DeviceSettings","marginBottom","main","mixins","background","default","ReactDOM","maxSnack","getElementById"],"mappings":"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gBACNrE,YAAa,yCACd,CACCqE,KAAM,oBACNrE,YAAa,IACd,CACCqE,KAAM,qBACNrE,YAAa,IACd,CACCqE,KAAM,qBACNrE,YAAa,IACd,CACCqE,KAAM,yBACNrE,YAAa,uCACd,CACCqE,KAAM,qBACNrE,YAAa,qBACd,CACCqE,KAAM,eACNrE,YAAa,mCACd,CACCqE,KAAM,cACNrE,YAAa,qDACd,CACCqE,KAAM,oBACNrE,YAAa,4DACd,CACCqE,KAAM,gBACNrE,YAAa,kEACd,CACCqE,KAAM,YACNrE,YAAa,IACd,CACCqE,KAAM,cACNrE,YAAa,0DACd,CACCqE,KAAM,mBACNrE,YAAa,8CACd,CACCqE,KAAM,eACNrE,YAAa,gDACd,CACCqE,KAAM,eACNrE,YAAa,qCACd,CACCqE,KAAM,iBACNrE,YAAa,8CACd,CACCqE,KAAM,mBACNrE,YAAa,wDACd,CACCqE,KAAM,oBACNrE,YAAa,oCACd,CACCqE,KAAM,cACNrE,YAAa,IACd,CACCqE,KAAM,kBACNrE,YAAa,IACd,CACCqE,KAAM,sBACNrE,YAAa,4CACd,CACCqE,KAAM,cACNrE,YAAa,IACd,CACCqE,KAAM,sBACNrE,YAAa,kCACd,CACCqE,KAAM,yBACNrE,YAAa,IACd,CACCqE,KAAM,qBACNrE,YAAa,0BACd,CACCqE,KAAM,qBACNrE,YAAa,0BACd,CACCqE,KAAM,aACNrE,YAAa,uCACd,CACCqE,KAAM,eACNrE,YAAa,+BAGtB,CACC8f,WAAY,eACZtK,eAAgB,GAChBuK,QAAS,EACT3K,MAAO,IACR,CACC0K,WAAY,eACZtK,eAAgB,GAChBuK,QAAS,EACT3K,MAAO,CACH,CACI/Q,KAAM,gBACNrE,YAAa,IACd,CACCqE,KAAM,sBACNrE,YAAa,6BACd,CACCqE,KAAM,uBACNrE,YAAa,gCACd,CACCqE,KAAM,kBACNrE,YAAa,iDACd,CACCqE,KAAM,iBACNrE,YAAa,6CACd,CACCqE,KAAM,eACNrE,YAAa,wBACd,CACCqE,KAAM,gBACNrE,YAAa,mDACd,CACCqE,KAAM,kBACNrE,YAAa,yDACd,CACCqE,KAAM,cACNrE,YAAa,mCACd,CACCqE,KAAM,qBACNrE,YAAa,8DACd,CACCqE,KAAM,eACNrE,YAAa,gDACd,CACCqE,KAAM,4BACNrE,YAAa,yDACd,CACCqE,KAAM,iBACNrE,YAAa,0CACd,CACCqE,KAAM,oBACNrE,YAAa,2CACd,CACCqE,KAAM,iBACNrE,YAAa,uDACd,CACCqE,KAAM,2BACNrE,YAAa,uDACd,CACCqE,KAAM,2BACNrE,YAAa,0CACd,CACCqE,KAAM,gBACNrE,YAAa,gCACd,CACCqE,KAAM,qBACNrE,YAAa,kDACd,CACCqE,KAAM,2BACNrE,YAAa,IACd,CACCqE,KAAM,iBACNrE,YAAa,IACd,CACCqE,KAAM,gBACNrE,YAAa,uDACd,CACCqE,KAAM,wBACNrE,YAAa,+DACd,CACCqE,KAAM,eACNrE,YAAa,oBACd,CACCqE,KAAM,0BACNrE,YAAa,oDACd,CACCqE,KAAM,kBACNrE,YAAa,qEACd,CACCqE,KAAM,UACNrE,YAAa,IACd,CACCqE,KAAM,UACNrE,YAAa,IACd,CACCqE,KAAM,UACNrE,YAAa,IACd,CACCqE,KAAM,UACNrE,YAAa,IACd,CACCqE,KAAM,eACNrE,YAAa,0BACd,CACCqE,KAAM,yBACNrE,YAAa,yCAGtB,CACC8f,WAAY,eACZtK,eAAgB,GAChBuK,QAAS,EACT3K,MAAO,CACH,CACI/Q,KAAM,UACNrE,YAAa,IACd,CACCqE,KAAM,UACNrE,YAAa,IACd,CACCqE,KAAM,UACNrE,YAAa,IACd,CACCqE,KAAM,UACNrE,YAAa,IACd,CACCqE,KAAM,UACNrE,YAAa,IACd,CACCqE,KAAM,UACNrE,YAAa,IACd,CACCqE,KAAM,UACNrE,YAAa,IACd,CACCqE,KAAM,UACNrE,YAAa,IACd,CACCqE,KAAM,UACNrE,YAAa,IACd,CACCqE,KAAM,UACNrE,YAAa,IACd,CACCqE,KAAM,UACNrE,YAAa,IACd,CACCqE,KAAM,UACNrE,YAAa,IACd,CACCqE,KAAM,UACNrE,YAAa,IACd,CACCqE,KAAM,UACNrE,YAAa,IACd,CACCqE,KAAM,U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Aa,mCACd,CACCqE,KAAM,cACNrE,YAAa,qDACd,CACCqE,KAAM,oBACNrE,YAAa,4DACd,CACCqE,KAAM,gBACNrE,YAAa,kEACd,CACCqE,KAAM,YACNrE,YAAa,IACd,CACCqE,KAAM,cACNrE,YAAa,0DACd,CACCqE,KAAM,mBACNrE,YAAa,8CACd,CACCqE,KAAM,eACNrE,YAAa,gDACd,CACCqE,KAAM,eACNrE,YAAa,qCACd,CACCqE,KAAM,iBACNrE,YAAa,8CACd,CACCqE,KAAM,mBACNrE,YAAa,wDACd,CACCqE,KAAM,oBACNrE,YAAa,oCACd,CACCqE,KAAM,cACNrE,YAAa,IACd,CACCqE,KAAM,kBACNrE,YAAa,IACd,CACCqE,KAAM,sBACNrE,YAAa,4CACd,CACCqE,KAAM,cACNrE,YAAa,IACd,CACCqE,KAAM,sBACNrE,YAAa,kCACd,CACCqE,KAAM,yBACNrE,YAAa,IACd,CACCqE,KAAM,qBACNrE,YAAa,0BACd,CACCqE,KAAM,qBACNrE,YAAa,0BACd,CACCqE,KAAM,aACNrE,YAAa,uCACd,CACCqE,KAAM,eACNrE,YAAa,+BAGtB,CACC8f,WAAY,eACZtK,eAAgB,GAChBuK,QAAS,EACT3K,MAAO,IACR,CACC0K,WAAY,eACZtK,eAAgB,GAChBuK,QAAS,EACT3K,MAAO,CACH,CACI/Q,KAAM,gBACNrE,YAAa,IACd,CACCqE,KAAM,sBACNrE,YAAa,6BACd,CACCqE,KAAM,uBACNrE,YAAa,gCACd,CACCqE,KAAM,kBACNrE,YAAa,iDACd,CACCqE,KAAM,iBACNrE,YAAa,6CACd,CACCqE,KAAM,eACNrE,YAAa,wBACd,CACCqE,KAAM,gBACNrE,YAAa,mDACd,CACCqE,KAAM,kBACNrE,YAAa,yDACd,CACCqE,KAAM,cACNrE,YAAa,mCACd,CACCqE,KAAM,qBACNrE,YAAa,8DACd,CACCqE,KAAM,eACNrE,YAAa,gDACd,CACCqE,KAAM,4BACNrE,YAAa,yDACd,CACCqE,KAAM,iBACNrE,YAAa,0CACd,CACCqE,KAAM,oBACNrE,YAAa,2CACd,CACCqE,KAAM,iBACNrE,YAAa,uDACd,CACCqE,KAAM,2BACNrE,YAAa,uDACd,CACCqE,KAAM,2BACNrE,YAAa,0CACd,CACCqE,KAAM,gBACNrE,YAAa,gCACd,CACCqE,KAAM,qBACNrE,YAAa,kDACd,CACCqE,KAAM,2BACNrE,YAAa,IACd,CACCqE,KAAM,iBACNrE,YAAa,IACd,CACCqE,KAAM,gBACNrE,YAAa,uDACd,CACCqE,KAAM,wBACNrE,YAAa,+DACd,CACCqE,KAAM,eACNrE,YAAa,oBACd,CACCqE,KAAM,0BACNrE,YAAa,oDACd,CACCqE,KAAM,kBACNrE,YAAa,qEACd,CACCqE,KAAM,mBACNrE,YAAa,2DACd,CACCqE,KAAM,wBACNrE,YAAa,gDACd,CACCqE,KAAM,UACNrE,YAAa,IACd,CACCqE,KAAM,UACNrE,YAAa,IACd,CACCqE,KAAM,eACNrE,YAAa,0BACd,CACCqE,KAAM,yBACNrE,YAAa,yCAGtB,CACC8f,WAAY,eACZtK,eAAgB,GAChBuK,QAAS,EACT3K,MAAO,CACH,CACI/Q,KAAM,UACNrE,YAAa,IACd,CACCqE,KAAM,UACNrE,YAAa,IACd,CACCqE,KAAM,UACNrE,YAAa,IACd,CACCqE,KAAM,UACNrE,YAAa,IACd,CACCqE,KAAM,UACNrE,YAAa,IACd,CACCqE,KAAM,UACNrE,YAAa,IACd,CACCqE,KAAM,UACNrE,YAAa,IACd,CACCqE,KAAM,UACNrE,YAAa,IACd,CACCqE,KAAM,UACNrE,YAAa,IACd,CACCqE,KAAM,UACNrE,YAAa,IACd,CACCqE,KAAM,UACNrE,YAAa,IACd,CACCqE,KAAM,UACNrE,YAAa,IACd,CACCqE,KAAM,UACNrE,YAAa,IACd,CACCqE,KAAM,UACNrE,YAAa,IACd,CACCqE,KAAM,UACNrE,YAAa,IACd,CACCqE,KAAM,UACNrE,YAAa,IACd,CACCqE,KAAM,UACNrE,YAAa,IACd,CACCqE,KAAM,UACNrE,YAAa,IACd,CACCqE,KAAM,UACNrE,YAAa,IACd,CACCqE,KAAM,UACNrE,YAAa,IACd,CACCqE,KAAM,UACNrE,YAAa,IAC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","file":"static/js/main.f282c3b3.chunk.js","sourcesContent":["/*\n\n  Copyright (C) 2019  Shantur Rathore\n  \n  This program is free software: you can redistribute it and/or modify\n  it under the terms of the GNU General Public License as published by\n  the Free Software Foundation, either version 3 of the License, or\n  (at your option) any later version.\n  This program is distributed in the hope that it will be useful,\n  but WITHOUT ANY WARRANTY; without even the implied warranty of\n  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n  GNU General Public License for more details.\n  You should have received a copy of the GNU General Public License\n  along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\n*/\n\nvar hidden, visibilityChange;\nif (typeof document.hidden !== \"undefined\") { // Opera 12.10 and Firefox 18 and later support \n    hidden = \"hidden\";\n    visibilityChange = \"visibilitychange\";\n} else if (typeof document.msHidden !== \"undefined\") {\n    hidden = \"msHidden\";\n    visibilityChange = \"msvisibilitychange\";\n} else if (typeof document.webkitHidden !== \"undefined\") {\n    hidden = \"webkitHidden\";\n    visibilityChange = \"webkitvisibilitychange\";\n}\n\nvar onWindowVisibilityChangedCallbacks = [];\n\nfunction addVisibilityChangeCallback(onWindowVisibilityChanged) {\n    var index = onWindowVisibilityChangedCallbacks.indexOf(onWindowVisibilityChanged);\n    if (index === -1) {\n        onWindowVisibilityChangedCallbacks.push(onWindowVisibilityChanged);\n    }\n}\n\nfunction removeVisibilityChangeCallback(onWindowVisibilityChanged) {\n    var index = onWindowVisibilityChangedCallbacks.indexOf(onWindowVisibilityChanged);\n    if (index !== -1) {\n        onWindowVisibilityChangedCallbacks.splice(index, 1);\n    }\n}\n\nfunction handleVisibilityChange() {\n    for (let callback of onWindowVisibilityChangedCallbacks) {\n        callback(!document[hidden]);\n    }\n}\n\n// Warn if the browser doesn't support addEventListener or the Page Visibility API\nif (typeof document.addEventListener === \"undefined\" || hidden === undefined) {\n    console.log(\"This requires a browser, such as Google Chrome or Firefox, that supports the Page Visibility API.\");\n} else {\n    // Handle page visibility change   \n    document.addEventListener(visibilityChange, handleVisibilityChange, false);\n}\n\nexport default { addVisibilityChangeCallback, removeVisibilityChangeCallback };","/*\n\n  Copyright (C) 2019  Shantur Rathore\n  \n  This program is free software: you can redistribute it and/or modify\n  it under the terms of the GNU General Public License as published by\n  the Free Software Foundation, either version 3 of the License, or\n  (at your option) any later version.\n  This program is distributed in the hope that it will be useful,\n  but WITHOUT ANY WARRANTY; without even the implied warranty of\n  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n  GNU General Public License for more details.\n  You should have received a copy of the GNU General Public License\n  along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\n*/\n\nimport React from 'react'\n\nimport IconButton from '@material-ui/core/IconButton';\nimport Tooltip from '@material-ui/core/Tooltip';\n\n\nclass ActionButton extends React.Component {\n\n    render() {\n        let display = this.props.icon\n        if (this.props.selected) {\n            display = this.props.selectedIcon\n        }\n\n        return (\n            <Tooltip title={this.props.toolTip} style={{visibility: this.props.visibility ? this.props.visibility : \"visible\"}}>\n                <IconButton aria-label={this.props.label} onClick={(event) => this.props.onButtonClick(event)}>\n                    {display}\n                </IconButton>\n            </Tooltip>\n\n        )\n    }\n}\n\nexport default ActionButton","/*\n\n  Copyright (C) 2019  Shantur Rathore\n  \n  This program is free software: you can redistribute it and/or modify\n  it under the terms of the GNU General Public License as published by\n  the Free Software Foundation, either version 3 of the License, or\n  (at your option) any later version.\n  This program is distributed in the hope that it will be useful,\n  but WITHOUT ANY WARRANTY; without even the implied warranty of\n  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n  GNU General Public License for more details.\n  You should have received a copy of the GNU General Public License\n  along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\n*/\n\nimport React from 'react'\nimport ExpansionPanel from '@material-ui/core/ExpansionPanel';\nimport ExpansionPanelDetails from '@material-ui/core/ExpansionPanelDetails';\nimport ExpansionPanelSummary from '@material-ui/core/ExpansionPanelSummary';\nimport ExpansionPanelActions from '@material-ui/core/ExpansionPanelActions';\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport List from '@material-ui/core/List';\nimport { Typography, Box, Radio, TextField, Button, Divider, TextareaAutosize } from '@material-ui/core';\nimport { Scrollbar } from 'react-scrollbars-custom';\nimport HighlightOffIcon from '@material-ui/icons/HighlightOff';\nimport HelpIcon from '@material-ui/icons/Help';\nimport IconButton from '@material-ui/core/IconButton';\n\n\nimport ActionButton from './ActionButton'\n\nclass CommandDisplay extends React.Component {\n\n    commandSent = null\n\n    constructor(props) {\n        super(props)\n\n        this.commandOptions = this.props.command.options.concat([])\n\n        this.commandOptions.unshift({\n            display: \"Read\",\n            description: \"Read current value from device\",\n            type: \"select\"\n        })\n\n        let defaultOption = this.commandOptions[0]\n\n        let defaultInputSelection\n        if (this.props.commandName.endsWith(\"<x>\") && this.props.command.indexed) {\n            this.inputRange = []\n            let range = this.props.command.indexRange.split('..');\n            for (var i = range[0]; i <= range[1]; i++) {\n                this.inputRange.push(i);\n            }\n            defaultInputSelection = this.inputRange[0]\n        } else {\n            this.inputRange = [\"\"]\n            defaultInputSelection = \"\"\n        }\n\n        this.state = {\n            commandIndex: 0,\n            selectedOption: defaultOption,\n            valueToSend: \"\",\n            commandToSend: this.generateCommand(defaultOption, \"\", 1),\n            logsOutput: \"\",\n            currentSelectedInputRangeValue: defaultInputSelection,\n            currentSelectedCommand: this.generateCurrentCommand(1),\n        }\n    }\n\n\n    componentWillMount() {\n        this.props.deviceConnector.connect(this)\n    }\n\n    componentWillUnmount() {\n        this.props.deviceConnector.disconnect(this)\n    }\n\n    onCommandResponse(cmnd, success, response) {\n\n        if (this.commandSent && cmnd === this.commandSent) {\n            let log = `Command ${cmnd} : ${success ? \"Success\" : \"Failed\"}`\n            if (success) {\n                log += `\\nResponse : ${JSON.stringify(response, null, 2)}`\n            }\n            this.addLog(log)\n        }\n    }\n\n    onClearLog(event) {\n        event.stopPropagation()\n        this.setState({ logsOutput: '' })\n    }\n\n    addLog(newLog) {\n        this.setState({ logsOutput: (this.state.logsOutput + `\\n${new Date().toLocaleTimeString()} : ${newLog}`).trim() })\n    }\n\n    sendCommandInternal(event, command) {\n        event.stopPropagation()\n        this.addLog('Sending command : ' + command)\n        this.commandSent = command\n        this.props.deviceConnector.performCommandOnDevice(command)\n\n    }\n\n    sendCommand(event) {\n        this.sendCommandInternal(event, this.state.commandToSend)\n    }\n\n    onCommandInputChanged(event) {\n        event.stopPropagation()\n        this.setState({ commandToSend: event.target.value })\n    }\n\n    onInputRangeItemSelected(event, value) {\n        event.stopPropagation()\n        this.setState({ currentSelectedInputRangeValue: value, currentSelectedCommand: this.generateCurrentCommand(value), commandToSend: this.generateCommand(this.state.selectedOption, this.state.valueToSend, value) })\n    }\n\n    onValueInputChanged(event) {\n        event.stopPropagation()\n        this.setState({ valueToSend: event.target.value, commandToSend: this.generateCommand(this.state.selectedOption, event.target.value, this.state.currentSelectedInputRangeValue) })\n    }\n\n    onOptionItemSelected(event, option) {\n        event.stopPropagation()\n        this.setState({ selectedOption: option, commandToSend: this.generateCommand(option, this.state.valueToSend, this.state.currentSelectedInputRangeValue) })\n    }\n\n    isCurrentSelectedOption(option) {\n        if (this.state.selectedOption) {\n            return this.state.selectedOption === option\n        } else {\n            return false\n        }\n    }\n\n    shouldShowValueInput() {\n        if (this.state.selectedOption) {\n            return this.state.selectedOption.type === \"input\" || this.state.selectedOption.type === \"range\"\n        } else {\n            return false\n        }\n    }\n\n    generateCurrentCommand(rangeValue) {\n        if (this.props.commandName.endsWith('<x>')) {\n            return this.props.commandName.replace(\"<x>\", rangeValue)\n        } else {\n            return this.props.commandName\n        }\n    }\n\n    generateCommand(option, valueToSend, rangeValue) {\n        let command = this.generateCurrentCommand(rangeValue)\n        if (option) {\n            switch (option.type) {\n                case \"select\":\n                    if (option.display !== \"Read\") {\n                        let arg = option.display\n                        let slashIndex = arg.indexOf(\"/\")\n                        if (slashIndex > 0) {\n                            arg = arg.substring(0, slashIndex)\n                        }\n                        command += ` ${arg}`\n                    }\n                    break\n\n                case \"input\":\n                case \"range\":\n                default:\n                    command += ` ${valueToSend}`\n                    break\n\n            }\n        }\n        return command\n    }\n\n    renderCommandDetails() {\n        return (\n            // <React.Fragment>\n            <Box display=\"flex\" flexDirection=\"column\" flexGrow={1} paddingTop={3}>\n                <Box display=\"flex\" flexDirection=\"row\" flexGrow={1}>\n                    <Scrollbar style={{ width: 300, height: 200 }} px={5} flexGrow={4}>\n                        <List dense>\n                            {this.inputRange.map(value => {\n                                let command = this.generateCurrentCommand(value)\n                                return (\n                                    <ListItem key={value} role={undefined} button onClick={(event) => this.onInputRangeItemSelected(event, value)}>\n                                        <ListItemIcon>\n                                            <Radio\n                                                checked={this.state.currentSelectedInputRangeValue === value}\n                                                value={value}\n                                                name={value}\n                                                inputProps={{ 'aria-label': 'A' }}\n                                            />\n                                        </ListItemIcon>\n                                        <ListItemText id={command} primary={command} />\n                                    </ListItem>\n                                )\n                            })}\n                        </List>\n                    </Scrollbar>\n                    <Scrollbar style={{ width: 300, height: 200 }} px={5} flexGrow={4}>\n                        <List dense>\n                            {this.commandOptions.map(option => {\n                                return (\n                                    <ListItem key={option.display} role={undefined} button onClick={(event) => this.onOptionItemSelected(event, option)}>\n                                        <ListItemIcon>\n                                            <Radio\n                                                checked={this.isCurrentSelectedOption(option)}\n                                                // onChange={handleChange}\n                                                value={option.display}\n                                                name={option.display}\n                                                inputProps={{ 'aria-label': 'A' }}\n                                            />\n                                        </ListItemIcon>\n                                        <ListItemText id={option.display} primary={option.display} secondary={option.description} />\n                                    </ListItem>\n                                )\n                            })}\n                        </List>\n                    </Scrollbar>\n                    {this.shouldShowValueInput() ?\n                        <form noValidate autoComplete=\"off\">\n                            <TextField\n                                px={5}\n                                style={{ width: 500, height: 150 }}\n                                flexGrow={4}\n                                rows=\"8\"\n                                multiline\n                                required\n                                id=\"value\"\n                                label=\"Value\"\n                                onChange={(event) => this.onValueInputChanged(event)}\n                                value={this.state.valueToSend}\n                                margin=\"normal\"\n                                variant=\"outlined\"\n                            />\n                        </form>\n                        : null}\n\n                </Box>\n                <form noValidate autoComplete=\"off\">\n                    <TextField\n                        style={{ width: 1000, height: 100 }}\n                        rows=\"1\"\n                        multiline\n                        id=\"commandToSend\"\n                        label=\"Command to Send\"\n                        value={this.state.commandToSend}\n                        onChange={(event) => this.onCommandInputChanged(event)}\n                        margin=\"normal\"\n                        variant=\"outlined\"\n                    />\n                </form>\n\n                <Typography px={5} flexGrow={1}>Logs</Typography>\n                <Box display=\"flex\" flexDirection=\"row\" flexGrow={0}>\n                    <TextareaAutosize\n                        aria-label=\"minimum height\"\n                        rows={6}\n                        rowsMax={8}\n                        value={this.state.logsOutput}\n                        disabled\n                        style={{ width: 1000, height: 100 }} />\n\n                    <ActionButton\n                        key={this.props.commandName + 'clearlog'}\n                        toolTip=\"Clear Log\"\n                        label=\"Clear Log\"\n                        icon={<HighlightOffIcon />}\n                        onButtonClick={(event) => this.onClearLog(event)}\n                    />\n                </Box>\n\n            </Box>\n        )\n    }\n\n    openHelp(event, command) {\n        event.stopPropagation()\n        window.open(`https://tasmota.github.io/docs/#/Commands?id=${this.props.commandName.toLowerCase().replace(\"<x>\", \"\")}`, \"tascommands\")\n    }\n\n    render() {\n\n        return (\n            <ExpansionPanel key={`CommandDisplay-${this.props.commandName}`} TransitionProps={{ unmountOnExit: true, mountOnEnter: true }}>\n                <ExpansionPanelSummary\n                    expandIcon={<ExpandMoreIcon />}\n                    aria-controls=\"panel1a-content\"\n                    id=\"panel1a-header\"\n                >\n                    <Box display=\"flex\" flexDirection=\"row\" alignItems=\"center\" style={{ flexBasis: \"33%\" }}>\n                        <Typography>{this.props.commandName}</Typography>\n                        <IconButton onClick={(event) => this.openHelp(event,this.props.commandName)}>\n                            <HelpIcon />\n                        </IconButton>\n                    </Box>\n                    <Typography style={{ alignSelf: \"center\" }} color=\"textSecondary\" >{this.props.command.description.substring(0, 60)}</Typography>\n                </ExpansionPanelSummary>\n                <ExpansionPanelDetails>\n                    <Box display=\"flex\" flexDirection=\"column\" flexWrap=\"wrap\">\n                        <Typography style={{ whiteSpace: 'pre-line' }}>{this.props.command.description}</Typography>\n                        {this.renderCommandDetails()}\n                    </Box>\n                </ExpansionPanelDetails>\n                <Divider />\n                <ExpansionPanelActions>\n                    <Button size=\"small\" variant=\"contained\" onClick={(event) => this.sendCommand(event)}>Send Command</Button>\n                </ExpansionPanelActions>\n            </ExpansionPanel>\n        )\n    }\n}\n\nexport default CommandDisplay","/*\n\n  Copyright (C) 2019  Shantur Rathore\n  \n  This program is free software: you can redistribute it and/or modify\n  it under the terms of the GNU General Public License as published by\n  the Free Software Foundation, either version 3 of the License, or\n  (at your option) any later version.\n  This program is distributed in the hope that it will be useful,\n  but WITHOUT ANY WARRANTY; without even the implied warranty of\n  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n  GNU General Public License for more details.\n  You should have received a copy of the GNU General Public License\n  along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\n*/\n\nimport React from 'react'\nimport CommandDisplay from './CommandDisplay'\nimport ExpansionPanel from '@material-ui/core/ExpansionPanel';\nimport ExpansionPanelDetails from '@material-ui/core/ExpansionPanelDetails';\nimport ExpansionPanelSummary from '@material-ui/core/ExpansionPanelSummary';\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\nimport Box from '@material-ui/core/Box';\nimport Typography from '@material-ui/core/Typography'\n\nclass CommandGroup extends React.Component {\n\n    render() {\n        return (\n\n            <ExpansionPanel key={`CommandGroup-`} TransitionProps={{ unmountOnExit: true, mountOnEnter: true }}>\n                <ExpansionPanelSummary\n                    expandIcon={<ExpandMoreIcon />}\n                    aria-controls=\"panel1a-content\"\n                    id=\"panel1a-header\"\n                >\n                    <Typography>{`${this.props.commandGroupName} ${this.props.groupType}`}</Typography>\n                </ExpansionPanelSummary>\n                <ExpansionPanelDetails>\n                    <Box display=\"flex\" flexDirection=\"column\" flexGrow={1}>\n                        {Object.entries(this.props.commandGroup).sort().map(([commandName, command]) => {\n                            return (\n                                <CommandDisplay commandName={commandName} command={command} deviceConnector={this.props.deviceConnector} />\n                            )\n                        })}\n                    </Box>\n                </ExpansionPanelDetails>\n            </ExpansionPanel>\n        )\n    }\n\n}\n\n\nexport default CommandGroup","/*\n\n  Copyright (C) 2019  Shantur Rathore\n  \n  This program is free software: you can redistribute it and/or modify\n  it under the terms of the GNU General Public License as published by\n  the Free Software Foundation, either version 3 of the License, or\n  (at your option) any later version.\n  This program is distributed in the hope that it will be useful,\n  but WITHOUT ANY WARRANTY; without even the implied warranty of\n  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n  GNU General Public License for more details.\n  You should have received a copy of the GNU General Public License\n  along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\n*/\n\nimport React from 'react'\nimport { Box, TextField } from '@material-ui/core'\nimport { withStyles, ThemeProvider, createMuiTheme } from '@material-ui/core/styles';\nimport EditIcon from '@material-ui/icons/Edit';\nimport ActionButton from './ActionButton';\nimport DoneIcon from '@material-ui/icons/Done';\nimport CancelIcon from '@material-ui/icons/Cancel';\n\nconst styles = theme => ({\n    disabledInput: {\n        color: theme.palette.text.primary,\n    },\n})\n\nclass EditableSetting extends React.Component {\n\n    constructor(props) {\n        super(props)\n        this.state = {\n            enableEdit: false,\n            currentValue: this.props.currentValue,\n        }\n    }\n\n    save(event) {\n        event.stopPropagation()\n        this.props.settingUpdatedCallback(this.props.currentValue, this.state.currentValue)\n        this.setState({ enableEdit: false })\n    }\n\n    render() {\n        const { classes } = this.props\n        return (\n            <Box display=\"flex\" flexDirection=\"row\" flexGrow={0} flexShrink={1} justifyContent=\"center\">\n                <TextField\n                    key={'editable-setting' + this.props.command}\n                    disabled={this.state.enableEdit ? 0 : 1}\n                    id={'id' + this.props.command}\n                    label={this.props.label}\n                    color=\"primary\"\n                    margin=\"normal\"\n                    value={this.state.currentValue}\n                    InputProps={{ classes: { disabled: classes.disabledInput } }}\n                    onChange={(event) => this.setState({ currentValue: event.target.value })}\n                />\n\n                {!this.state.enableEdit ?\n                    <React.Fragment>\n                        <ActionButton\n                            toolTip=\"Edit\"\n                            label=\"edit\"\n                            icon={<EditIcon />}\n                            onButtonClick={() => this.setState({ enableEdit: true })}\n                        />\n                    </React.Fragment>\n                    :\n                    (\n                        <React.Fragment>\n                            <ActionButton\n                                toolTip=\"Save\"\n                                label=\"save\"\n                                icon={<DoneIcon />}\n                                onButtonClick={(event) => this.save(event)}\n\n                            />\n                        </React.Fragment>\n                    )\n                }\n\n                <ActionButton\n                    visibility={this.state.enableEdit ? \"visible\" : \"hidden\"}\n                    toolTip=\"Cancel\"\n                    label=\"cancel\"\n                    icon={<CancelIcon />}\n                    onButtonClick={(event) => this.setState({ enableEdit: false, currentValue: this.props.currentValue })}\n                />\n\n            </Box>\n\n        )\n    }\n}\n\nexport default withStyles(styles)(EditableSetting)","/*\n\n  Copyright (C) 2019  Shantur Rathore\n  \n  This program is free software: you can redistribute it and/or modify\n  it under the terms of the GNU General Public License as published by\n  the Free Software Foundation, either version 3 of the License, or\n  (at your option) any later version.\n  This program is distributed in the hope that it will be useful,\n  but WITHOUT ANY WARRANTY; without even the implied warranty of\n  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n  GNU General Public License for more details.\n  You should have received a copy of the GNU General Public License\n  along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\n*/\n\nimport React from 'react'\nimport TextField from \"@material-ui/core/TextField\";\nimport { Typography, Box, Button } from '@material-ui/core';\nimport ExpansionPanel from '@material-ui/core/ExpansionPanel';\nimport ExpansionPanelDetails from '@material-ui/core/ExpansionPanelDetails';\nimport ExpansionPanelSummary from '@material-ui/core/ExpansionPanelSummary';\nimport ExpansionPanelActions from '@material-ui/core/ExpansionPanelActions';\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\nimport Divider from '@material-ui/core/Divider';\n\nclass SettingsGroup extends React.Component {\n\n    constructor(pros) {\n        super(pros)\n        let defaultStates = {}\n        this.props.settingsGroup.settings.forEach((setting) => {\n            defaultStates[setting.command] = \"\"\n        })\n        this.state = {\n            settingsStates: defaultStates,\n        }\n        this.commandResponses = {}\n    }\n\n    onCommandResponse(cmnd, success, response) {\n        console.log('Settings cmnd %s success %s response : %O ', cmnd, success, response)\n        if (success) {\n            let newState = Object.assign({}, this.state.settingsStates)\n            Object.keys(response).forEach((key) => {\n                if (key.toUpperCase() === cmnd.toUpperCase()) {\n                    newState[cmnd] = response[key];\n                    this.commandResponses[cmnd] = response[key]\n                }\n            })\n            // newState[cmnd] = String(response[cmnd])\n            this.setState({\n                settingsStates: newState,\n            })\n        }\n    }\n\n    componentDidMount() {\n        this.props.deviceConnector.connect(this);\n        this.props.settingsGroup.settings.forEach((setting, index) => {\n            this.props.deviceConnector.performCommandOnDeviceDirect(setting.command);\n        })\n    }\n\n    componentWillUnmount() {\n        this.props.deviceConnector.disconnect(this);\n    }\n\n    getCurrentSettings = command => (event, isExpanded) => {\n        event.stopPropagation()\n        if (isExpanded) {\n            this.props.settingsGroup.settings.forEach((setting, index) => {\n                this.props.deviceConnector.performCommandOnDeviceDirect(setting.command);\n            })\n        }\n    }\n\n    handleSettingsChanged(event, command) {\n        event.stopPropagation()\n        let newState = Object.assign({}, this.state.settingsStates)\n        newState[command] = event.target.value\n        this.setState({\n            settingsStates: newState,\n        })\n    }\n\n    renderSettingInputs() {\n        return this.props.settingsGroup.settings.map((setting, index) => {\n            return <TextField\n                key={'settings' + setting.command}\n                id={'id' + setting.name}\n                label={setting.name}\n                // placeholder={setting.name}\n                margin=\"normal\"\n                variant=\"outlined\"\n                value={this.state.settingsStates[setting.command]}\n                onChange={(event) => this.handleSettingsChanged(event, setting.command)}\n            />\n        })\n    }\n\n    saveSettings(event) {\n        event.stopPropagation()\n        let command = 'backlog'\n        this.props.settingsGroup.settings.forEach((setting, index) => {\n            if (this.state.settingsStates[setting.command] !== this.commandResponses[setting.command]) {\n                command += ' ' + setting.command + ' ' + this.state.settingsStates[setting.command] + ';'\n            }\n        })\n\n        if (command !== 'backlog') {\n            command = command.slice(0, -1);\n            console.log('Performing command %s', command)\n            this.props.deviceConnector.performCommandOnDeviceDirect(command);\n        }\n    }\n\n    render() {\n        return (\n\n            <ExpansionPanel key={`SettingsExpansionPanel-${this.props.settingsGroup.groupName}`} onChange={this.getCurrentSettings()}>\n                <ExpansionPanelSummary\n                    expandIcon={<ExpandMoreIcon />}\n                    aria-controls=\"panel1a-content\"\n                    id=\"panel1a-header\"\n                >\n                    <Typography>{this.props.settingsGroup.groupName}</Typography>\n                </ExpansionPanelSummary>\n                <ExpansionPanelDetails>\n                    <Box display=\"flex\" flexDirection=\"row\" flexWrap=\"wrap\">\n                        {this.renderSettingInputs()}\n                    </Box>\n                </ExpansionPanelDetails>\n                <Divider />\n                <ExpansionPanelActions>\n                    <Button size=\"small\" variant=\"contained\" onClick={(event) => this.saveSettings(event)}>Save {this.props.settingsGroup.groupName}</Button>\n                </ExpansionPanelActions>\n            </ExpansionPanel>\n\n        )\n    }\n\n}\n\nexport default SettingsGroup","/*\n\n  Copyright (C) 2019  Shantur Rathore\n  \n  This program is free software: you can redistribute it and/or modify\n  it under the terms of the GNU General Public License as published by\n  the Free Software Foundation, either version 3 of the License, or\n  (at your option) any later version.\n  This program is distributed in the hope that it will be useful,\n  but WITHOUT ANY WARRANTY; without even the implied warranty of\n  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n  GNU General Public License for more details.\n  You should have received a copy of the GNU General Public License\n  along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\n*/\n\nimport { Box, Button, Divider, Paper, Slider, Tooltip, FormControl, InputLabel, Select, MenuItem, ExpansionPanelActions } from '@material-ui/core';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport { blue } from '@material-ui/core/colors';\nimport ExpansionPanel from '@material-ui/core/ExpansionPanel';\nimport ExpansionPanelDetails from '@material-ui/core/ExpansionPanelDetails';\nimport ExpansionPanelSummary from '@material-ui/core/ExpansionPanelSummary';\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemSecondaryAction from '@material-ui/core/ListItemSecondaryAction';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport Popover from '@material-ui/core/Popover';\nimport { createMuiTheme, ThemeProvider, withStyles } from '@material-ui/core/styles';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport Typography from '@material-ui/core/Typography';\nimport ContactlessIcon from '@material-ui/icons/Contactless';\nimport DeveloperBoardIcon from '@material-ui/icons/DeveloperBoard';\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\nimport React, { Component } from 'react';\nimport Svg from 'react-inlinesvg';\nimport CommandGroup from '../Components/CommandGroup';\nimport EditableSetting from '../Components/EditableSetting';\nimport SettingsGroup from '../Components/SettingsGroup';\nimport copyToClipboard from '../Utils/CopyToClipboard';\nimport VisibilityListener from '../Utils/VisibilityListener';\n\n\nconst styles = theme => ({\n    imageContainer: {\n        padding: theme.spacing(2),\n        height: 200,\n        width: 200,\n    },\n    root: {\n        padding: theme.spacing(3, 2),\n        margin: theme.spacing(2),\n    },\n    detailsContainer: {\n        padding: theme.spacing(2),\n        margin: theme.spacing(2),\n    },\n})\n\nconst onButtonTheme = createMuiTheme({\n    palette: {\n        primary: blue,\n    },\n});\n\nconst powerRegex = RegExp('POWER\\D*')\nconst dimmerRegex = RegExp('Dimmer\\D*')\n\n\nconst DimmerSlider = withStyles({\n    root: {\n        color: '#52af77',\n        height: 8,\n        width: 300,\n        paddingTop: 70,\n        paddingBottom: 10,\n        paddingLeft: 10,\n        paddingRight: 10,\n    },\n    thumb: {\n        height: 24,\n        width: 24,\n        backgroundColor: '#fff',\n        border: '2px solid currentColor',\n        marginTop: -8,\n        marginLeft: -12,\n        '&:focus,&:hover,&$active': {\n            boxShadow: 'inherit',\n        },\n    },\n    active: {},\n    valueLabel: {\n        left: 'calc(-50% + 4px)',\n    },\n    track: {\n        height: 8,\n        borderRadius: 4,\n    },\n    rail: {\n        height: 8,\n        borderRadius: 4,\n    },\n})(Slider);\n\nconst templateGPIOIndex = [\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"9\", \"10\", \"12\", \"13\", \"14\", \"15\", \"16\"]\n\nconst templateFlagOptions = [\n    { value: 0, text: \"No features\" },\n    { value: 1, text: \"Analog Value\" },\n    { value: 2, text: \"Temperatue\" },\n    { value: 3, text: \"Light\" },\n    { value: 4, text: \"Button\" },\n    { value: 5, text: \"Buttoni\" },\n    { value: 15, text: \"User configured (same as GPIO 255)\" },\n]\n\nclass TasmotaDevice extends Component {\n\n    deviceConnector = null;\n    deviceConfig = null;\n\n    visibilityListener = this.onWindowVisibilityChanged.bind(this)\n\n    constructor(props) {\n        super(props);\n        this.macAddress = this.props.macAddress;\n        this.state = {\n            deviceInfo: null,\n            dimmerAnchors: {},\n            online: false,\n            currentTemplate: {},\n            currentModuleConfig: [],\n            currentModuleType: 0,\n            pendingCommand: null,\n        }\n    }\n\n    onWindowVisibilityChanged(visible) {\n        if (visible) {\n            this.deviceConnector.resume();\n        } else {\n            this.deviceConnector.pause();\n        }\n    }\n\n    componentWillReceiveProps(nextProps) {\n        if (nextProps.macAddress !== this.macAddress) {\n            this.deviceConnector.disconnect();\n            this.deviceConnector = this.props.deviceManager.getDeviceConnector(nextProps.macAddress, this.props.deviceManager.getDevice(nextProps.macAddress).status0Response.StatusNET.IPAddress);\n            this.deviceConfig = this.props.deviceManager.getTasmotaConfig(nextProps.macAddress)\n            this.deviceConnector.connect();\n        }\n    }\n\n    componentWillMount() {\n        this.deviceConfig = this.props.deviceManager.getTasmotaConfig(this.macAddress)\n        let deviceInfo = this.props.deviceManager.getDevice(this.macAddress)\n        this.setState({\n            deviceInfo: deviceInfo,\n            currentTemplate: deviceInfo.templateResponse,\n        })\n        if (!this.deviceConnector) {\n            this.deviceConnector = this.props.deviceManager.getDeviceConnector(this.macAddress, this.props.deviceManager.getDevice(this.macAddress).status0Response.StatusNET.IPAddress);\n        }\n        this.setState({\n            online: this.deviceConnector.online\n        })\n        this.deviceConnector.connect(this);\n        VisibilityListener.addVisibilityChangeCallback(this.visibilityListener);\n    }\n\n    componentWillUnmount() {\n        VisibilityListener.removeVisibilityChangeCallback(this.visibilityListener);\n        this.deviceConnector.disconnect(this);\n    }\n\n    updateDeviceInfoState(updatedInfo) {\n        this.setState({ deviceInfo: { ...this.state.deviceInfo, ...updatedInfo } })\n        this.props.deviceManager.updateDevice(this.macAddress, updatedInfo)\n    }\n\n    onCommandResponse(cmnd, success, response) {\n        // console.log('Tasmota Device onCommandResponse cmnd: %s response : %O', cmnd, response)\n        let currentState = this.state.online\n\n        this.setState({ online: success });\n\n        if (success) {\n\n            if (!currentState) {\n                this.deviceConnector.performCommandOnDevice('Status 0')\n                if (this.state.pendingCommand) {\n                    this.deviceConnector.performCommandOnDevice(this.state.pendingCommand)\n                    this.setState( {pendingCommand: null})\n                }\n            }\n\n            if (cmnd === 'Status 0') {\n                // console.log('Status0 %s :  %O', this.macAddress, response);\n                this.updateDeviceInfoState({ status0Response: response })\n            } else if (cmnd === 'Template') {\n                this.updateDeviceInfoState({ templateResponse: response })\n                this.setState({ currentTemplate: response })\n                this.deviceConnector.performCommandOnDeviceDirect('GPIOS')\n            } else if (cmnd.startsWith('Template {')) {\n                this.updateDeviceInfoState({ templateResponse: response })\n                this.setState({ currentTemplate: response })\n            } else if (cmnd === 'GPIO 255' || cmnd === 'GPIO') {\n                // console.log('GPIO Response : %O', response)\n                if (cmnd === 'GPIO') {\n                    this.updateDeviceInfoState({ gpioResponse: response })\n                    this.setState({ currentModuleConfig: this.deviceConfig.gpioResponseFormatter(response)})\n                } else {\n                    this.updateDeviceInfoState({ gpio255Response: response })\n                }\n                this.deviceConnector.performCommandOnDeviceDirect('GPIOS')\n            } else if (cmnd === 'GPIOS') {\n                this.updateDeviceInfoState({ gpiosResponse: response })\n                this.deviceConnector.performCommandOnDeviceDirect('Modules')\n            } else if (cmnd === 'Modules') {\n                this.updateDeviceInfoState({ modulesResponse: response })\n            } else if (cmnd === 'State') {\n\n                if (response.Module) {\n                    delete response.Module\n                }\n\n                var status0Clone = Object.assign({}, this.state.deviceInfo.status0Response);\n\n                var statusNames = Object.keys(status0Clone)\n\n                statusNames.forEach((status) => {\n                    Object.keys(status0Clone[status]).forEach((param) => {\n                        if (response[param]) {\n                            status0Clone[status][param] = response[param]\n                        }\n                    })\n                })\n\n                this.updateDeviceInfoState({ status0Response: status0Clone })\n\n            } else if (cmnd === 'Status 8') {\n\n                var status0Clone = Object.assign({}, this.state.deviceInfo.status0Response);\n                status0Clone.StatusSNS = response.StatusSNS\n\n                this.updateDeviceInfoState({ status0Response: status0Clone })\n            } else if (cmnd === 'Module') {\n                this.updateDeviceInfoState({ moduleResponse: response })\n                this.setState({ currentModuleType: Object.keys(response.Module)[0] })\n            } else if (cmnd === 'WifiPower') {\n                this.updateDeviceInfoState({ wifiPowerResponse: response })\n            }\n        }\n    }\n\n    powerToggle(button, event) {\n        event.stopPropagation();\n        console.log('Toggle power ' + button)\n        this.deviceConnector.performCommandOnDevice(button + ' TOGGLE');\n    }\n\n    dimmerUpdate(dimmer, event, newValue) {\n        console.log('Dimmer id : %O, value %O newValue %O', dimmer, event, newValue);\n        event.stopPropagation()\n        this.deviceConnector.performCommandOnDevice(dimmer + ' ' + newValue);\n    }\n\n    getModuleDisplayText() {\n        if (this.state.deviceInfo.moduleResponse) {\n            let moduleParsed = this.deviceConfig.moduleResponseParser(this.state.deviceInfo.moduleResponse)\n            let moduleNum = Object.keys(moduleParsed.Module)[0];\n            return `${moduleNum} (${moduleParsed.Module[moduleNum]})`\n        } else {\n            return ''\n        }\n    }\n\n    renderTypeTableFriendlyNameCell() {\n        return (\n            <TableCell component=\"th\" scope=\"row\">\n                <Box display=\"flex\" flexDirection=\"column\" alignItems=\"center\">\n                    <Box fontSize={16}>\n                        {this.state.deviceInfo.status0Response.Status.FriendlyName[0]}\n                    </Box>\n                    <Box display=\"flex\" flexDirection=\"row\">\n                        {this.props.actionButtons}\n                    </Box>\n                </Box>\n            </TableCell>\n        )\n    }\n\n    renderTypeTableStatusRow() {\n        return (\n            <TableRow key={this.props.macAddress}>\n                {this.renderTypeTableFriendlyNameCell()}\n                <TableCell>{this.renderConnectivityStatus()}</TableCell>\n                <TableCell>{this.getModuleDisplayText()}</TableCell>\n                <TableCell><Box flex={1} flexDirection='row'>{this.renderDetailsControlsButtons('Table')}</Box></TableCell>\n                <TableCell>{this.renderDetailsControlsDimmers('Table')}</TableCell>\n            </TableRow>\n        )\n    }\n\n    renderTypeTableHealthRow() {\n        return (\n            <TableRow key={this.props.macAddress}>\n                <TableCell component=\"th\" scope=\"row\">\n                    <Box display=\"flex\" flexDirection=\"column\" alignItems=\"center\">\n                        <Box fontSize={16}>\n                            {this.state.deviceInfo.status0Response.Status.FriendlyName[0]}\n                        </Box>\n                        <Box display=\"flex\" flexDirection=\"row\">\n                            {this.props.actionButtons}\n                        </Box>\n                    </Box>\n                </TableCell>\n                <TableCell>{this.renderConnectivityStatus()}</TableCell>\n                <TableCell>{this.state.deviceInfo.status0Response.StatusSTS.Wifi.RSSI}</TableCell>\n                <TableCell>{this.state.deviceInfo.status0Response.StatusSTS.Uptime}</TableCell>\n                <TableCell>{this.state.deviceInfo.status0Response.StatusSTS.MqttCount}</TableCell>\n                <TableCell>{this.state.deviceInfo.status0Response.StatusSTS.Wifi.LinkCount}</TableCell>\n                <TableCell>{this.state.deviceInfo.status0Response.StatusSTS.Wifi.Downtime}</TableCell>\n                <TableCell>{this.state.deviceInfo.status0Response.StatusFWR.Version}</TableCell>\n                <TableCell>{this.state.deviceInfo.status0Response.StatusFWR.Core}</TableCell>\n                <TableCell>{this.state.deviceInfo.status0Response.StatusPRM.BootCount}</TableCell>\n                <TableCell>{this.state.deviceInfo.status0Response.StatusPRM.RestartReason}</TableCell>\n                <TableCell>{this.state.deviceInfo.status0Response.StatusSTS.LoadAvg}</TableCell>\n                <TableCell>{this.state.deviceInfo.status0Response.StatusSTS.Sleep}</TableCell>\n            </TableRow>\n        )\n    }\n\n    renderTypeTableWifiRow() {\n        return (\n            <TableRow key={this.props.macAddress}>\n                <TableCell component=\"th\" scope=\"row\">\n                    <Box display=\"flex\" flexDirection=\"column\" alignItems=\"center\">\n                        <Box fontSize={16}>\n                            {this.state.deviceInfo.status0Response.Status.FriendlyName[0]}\n                        </Box>\n                        <Box display=\"flex\" flexDirection=\"row\">\n                            {this.props.actionButtons}\n                        </Box>\n                    </Box>\n                </TableCell>\n                <TableCell>{this.renderConnectivityStatus()}</TableCell>\n                <TableCell>{this.state.deviceInfo.status0Response.StatusSTS.Wifi.RSSI}</TableCell>\n                <TableCell>{this.state.deviceInfo.wifiPowerResponse ? this.state.deviceInfo.wifiPowerResponse.WifiPower : 'Unsupported'}</TableCell>\n                <TableCell>{this.state.deviceInfo.status0Response.StatusSTS.Wifi.BSSId}</TableCell>\n                <TableCell>{this.state.deviceInfo.status0Response.StatusSTS.Wifi.LinkCount}</TableCell>\n                <TableCell>{this.state.deviceInfo.status0Response.StatusSTS.Wifi.Downtime}</TableCell>\n                <TableCell>{this.state.deviceInfo.status0Response.StatusNET.Hostname}</TableCell>\n                <TableCell>{this.state.deviceInfo.status0Response.StatusNET.Mac}</TableCell>\n                <TableCell>{this.state.deviceInfo.status0Response.StatusNET.IPAddress}</TableCell>\n                <TableCell>{this.state.deviceInfo.status0Response.StatusNET.Gateway}</TableCell>\n                <TableCell>{this.state.deviceInfo.status0Response.StatusSTS.Wifi.SSId}</TableCell>\n                <TableCell>{this.state.deviceInfo.status0Response.StatusSTS.Wifi.Channel}</TableCell>\n            </TableRow>\n        )\n    }\n\n    renderTypeTableMqttRow() {\n        return (\n            <TableRow key={this.props.macAddress}>\n                <TableCell component=\"th\" scope=\"row\">\n                    <Box display=\"flex\" flexDirection=\"column\" alignItems=\"center\">\n                        <Box fontSize={16}>\n                            {this.state.deviceInfo.status0Response.Status.FriendlyName[0]}\n                        </Box>\n                        <Box display=\"flex\" flexDirection=\"row\">\n                            {this.props.actionButtons}\n                        </Box>\n                    </Box>\n                </TableCell>\n                <TableCell>{this.renderConnectivityStatus()}</TableCell>\n                <TableCell>{this.state.deviceInfo.status0Response.StatusSTS.Wifi.RSSI}</TableCell>\n                <TableCell>{this.state.deviceInfo.status0Response.StatusSTS.MqttCount}</TableCell>\n                <TableCell>{this.state.deviceInfo.status0Response.Status.Topic}</TableCell>\n                <TableCell>'Full Topic - N/A'</TableCell>\n                <TableCell>'Command Topic - N/A'</TableCell>\n                <TableCell>'Stat Topic - N/A'</TableCell>\n                <TableCell>'Tele Topic - N/A'</TableCell>\n                <TableCell>'Fallback Topic - N/A'</TableCell>\n                <TableCell>{this.state.deviceInfo.status0Response.StatusPRM.GroupTopic}</TableCell>\n                <TableCell>{this.state.deviceInfo.status0Response.StatusMQT.MqttHost}</TableCell>\n                <TableCell>{this.state.deviceInfo.status0Response.StatusMQT.MqttPort}</TableCell>\n                <TableCell>{this.state.deviceInfo.status0Response.StatusMQT.MqttClient}</TableCell>\n            </TableRow>\n        )\n    }\n\n    renderTypeTableFirmwareRow() {\n        return (\n            <TableRow key={this.props.macAddress}>\n                <TableCell component=\"th\" scope=\"row\">\n                    <Box display=\"flex\" flexDirection=\"column\" alignItems=\"center\">\n                        <Box fontSize={16}>\n                            {this.state.deviceInfo.status0Response.Status.FriendlyName[0]}\n                        </Box>\n                        <Box display=\"flex\" flexDirection=\"row\">\n                            {this.props.actionButtons}\n                        </Box>\n                    </Box>\n                </TableCell>\n                <TableCell>{this.renderConnectivityStatus()}</TableCell>\n                <TableCell>{this.state.deviceInfo.status0Response.StatusFWR.Version}</TableCell>\n                <TableCell>{this.state.deviceInfo.status0Response.StatusFWR.Core}</TableCell>\n                <TableCell>{this.state.deviceInfo.status0Response.StatusFWR.SDK}</TableCell>\n                <TableCell>{this.state.deviceInfo.status0Response.StatusMEM.ProgramSize}</TableCell>\n                <TableCell>{this.state.deviceInfo.status0Response.StatusMEM.Free}</TableCell>\n                <TableCell>{this.state.deviceInfo.status0Response.StatusPRM.OtaUrl}</TableCell>\n            </TableRow>\n        )\n    }\n\n    renderTypeList() {\n        return (\n            <div style={{ width: '100%' }}>\n                <Box display=\"flex\">\n                    <DeveloperBoardIcon />\n                    <Box display=\"flex\" flexGrow={1} marginLeft={2}>\n                        <Typography>\n                            {/* {this.state.displayName} */}\n                        </Typography>\n                        {this.renderDetailsControlsDimmers()}\n                        {this.renderDetailsControlsButtons()}\n                    </Box>\n                    {this.props.actionButtons}\n                </Box>\n            </div>\n        )\n    }\n\n    renderConnectivityStatus() {\n        return (\n            <Tooltip title={this.state.online ? \"Online\" : \"Offline\"} >\n                <ContactlessIcon color={this.state.online ? \"primary\" : \"secondary\"} />\n            </Tooltip>\n        )\n    }\n\n    renderDetailsImage() {\n        return (\n            <Svg src=\"https://raw.githubusercontent.com/arendst/Tasmota/development/tools/logo/TASMOTA_Symbol_Vector.svg\" width=\"90%\" height=\"90%\" padding=\"20\" />\n        )\n    }\n\n    renderDetailsControlsButtons(type = 'Details') {\n        if (this.state.deviceInfo.status0Response) {\n            let buttons = Object.entries(this.state.deviceInfo.status0Response['StatusSTS']).filter(([key, value]) => {\n                if (powerRegex.test(key)) {\n                    return [key, value];\n                }\n            })\n\n            // console.log('DetailsControls buttons : %O', buttons)\n\n            return buttons.map(([key, value]) => {\n\n                let display = key;\n                if (type === 'Table') {\n                    display = key.replace('POWER', '');\n\n                    if (display === '') {\n                        display = '1'\n                    }\n                }\n\n                if (value === 'ON') {\n                    return (\n                        <ThemeProvider theme={onButtonTheme} key={key}>\n                            <Button variant=\"contained\" key={key} color=\"primary\" onClick={(event) => this.powerToggle(key, event)}>{display}</Button>\n                        </ThemeProvider>\n                    )\n                } else {\n                    return (\n                        <Button variant=\"contained\" key={key} onClick={(event) => this.powerToggle(key, event)}>{display}</Button>\n                    )\n                }\n            })\n        }\n    }\n\n    openDimmerPopover(dimmer, event) {\n        event.stopPropagation()\n        let newAnchors = Object.assign({}, this.state.dimmerAnchors);\n        newAnchors[dimmer] = event.target\n        this.setState({\n            dimmerAnchors: newAnchors,\n        })\n    }\n\n    dimmerPopoverClosed(dimmer, event) {\n        event.stopPropagation()\n        let newAnchors = Object.assign({}, this.state.dimmerAnchors);\n        delete newAnchors[dimmer]\n        this.setState({\n            dimmerAnchors: newAnchors,\n        })\n    }\n\n\n    renderDetailsControlsDimmers(type = 'Details') {\n        if (this.state.deviceInfo.status0Response) {\n            let dimmers = Object.entries(this.state.deviceInfo.status0Response['StatusSTS']).filter(([key, value]) => {\n                if (dimmerRegex.test(key)) {\n                    return [key, value];\n                }\n            })\n\n            // console.log('DetailsControls dimmers : %O', dimmers)\n\n            return dimmers.map(([key, value]) => {\n\n                let display = key + ' ' + value;\n                if (type === 'Table') {\n                    display = key.replace('Dimmer', 'Dim');\n                    display += ':' + value\n                }\n\n                return (\n                    <div>\n                        <Button variant=\"contained\" key={key} onClick={(event) => this.openDimmerPopover(key, event)}>{display}</Button>\n\n                        <Popover\n                            id={'dimmerPop' + key}\n                            open={Boolean(this.state.dimmerAnchors[key])}\n                            anchorEl={this.state.dimmerAnchors[key]}\n                            onClose={(event) => this.dimmerPopoverClosed(key, event)}\n                            anchorOrigin={{\n                                vertical: 'bottom',\n                                horizontal: 'center',\n                            }}\n                            transformOrigin={{\n                                vertical: 'top',\n                                horizontal: 'center',\n                            }}\n                        >\n                            <DimmerSlider\n                                defaultValue={value}\n                                id={key}\n                                aria-labelledby={key + 'slider'}\n                                valueLabelDisplay=\"on\"\n                                step={1}\n                                min={1}\n                                max={100}\n                                onChange={(event, value) => event.stopPropagation()}\n                                onChangeCommitted={(event, value) => this.dimmerUpdate(key, event, value)}\n                            />\n                        </Popover>\n                    </div>\n                )\n            })\n        }\n    }\n\n    renderDetailsStatuses() {\n\n        return Object.entries(this.state.deviceInfo.status0Response).map(([cmnd, cmndData]) => {\n\n            return (\n                <ExpansionPanel key={cmnd}>\n                    <ExpansionPanelSummary\n                        expandIcon={<ExpandMoreIcon />}\n                        aria-controls=\"panel1a-content\"\n                        id=\"panel1a-header\"\n                    >\n                        <Typography>{cmnd}</Typography>\n                    </ExpansionPanelSummary>\n                    <ExpansionPanelDetails>\n                        <Table aria-label=\"simple table\" size=\"small\">\n                            <TableHead>\n                                <TableRow>\n                                    <TableCell>Key</TableCell>\n                                    <TableCell>Value</TableCell>\n                                </TableRow>\n                            </TableHead>\n                            <TableBody>\n                                {Object.entries(cmndData).map(([key, value]) => {\n                                    return (\n                                        <TableRow key={key}>\n                                            <TableCell align=\"left\">{key}</TableCell>\n                                            <TableCell align=\"left\">\n                                                <Typography display=\"inline\">\n                                                    {JSON.stringify(value, null, 2)}\n                                                </Typography>\n                                            </TableCell>\n                                        </TableRow>\n                                    )\n                                })}\n                            </TableBody>\n                        </Table>\n                    </ExpansionPanelDetails>\n                </ExpansionPanel>\n            )\n\n\n        })\n\n    }\n\n    convertHexStringToBitArray(bytesString) {\n        var bitArray = [];\n        var digitValue = 0;\n        let charArray = bytesString.toLowerCase().split('');\n\n\n        charArray.forEach((char, index) => {\n            digitValue = '0123456789abcdefgh'.indexOf(char);\n            for (let n = 3; n >= 0; n--) {\n                bitArray.push((digitValue >> n) & 1)\n            }\n        })\n\n        // console.log('ByteString: %s to bitArray : %O', bytesString, bitArray.reverse())\n        return bitArray.reverse()\n    }\n\n\n    renderDetailsSetOptions() {\n        return (\n            <ExpansionPanel key=\"SetOptionFlagExpansionPanel\" TransitionProps={{ unmountOnExit: true, mountOnEnter: true }}>\n                <ExpansionPanelSummary\n                    expandIcon={<ExpandMoreIcon />}\n                    aria-controls=\"panel1a-content\"\n                    id=\"panel1a-header\"\n                >\n                    <Typography>SetOption Flags</Typography>\n                </ExpansionPanelSummary>\n                <ExpansionPanelDetails>\n                    <List dense >\n                        {this.renderDetailsSetOptionsListItems()}\n                    </List>\n                </ExpansionPanelDetails>\n            </ExpansionPanel>\n        )\n    }\n\n    changeSetOption(setOption, event) {\n        event.stopPropagation()\n        this.deviceConnector.performCommandOnDevice(setOption + (event.target.checked ? ' 1' : ' 0'));\n    }\n\n    renderDetailsSetOptionsListItems() {\n\n        return this.state.deviceInfo.status0Response.StatusLOG.SetOption.map((setOptionStr, index) => {\n            if (index !== 1) {\n                let valueArray = this.convertHexStringToBitArray(setOptionStr)\n                return this.deviceConfig.setOptionsStatusMaps[index].items.map((item, itemIndex) => {\n                    if (item.name !== '' && item.description !== '') {\n                        var soValue = itemIndex + this.deviceConfig.setOptionsStatusMaps[index].setOptionStart;\n                        // console.log('SetOption%d (%s) : %d', soValue, item.name, valueArray[itemIndex])\n                        return (\n                            <React.Fragment>\n                                <ListItem key={'SetOption' + soValue}>\n                                    <ListItemText id={'checkbox-lable-SetOption' + soValue} primary={`SetOption${soValue}`}\n                                        secondary={item.description} />\n                                    <ListItemSecondaryAction>\n                                        <Checkbox\n                                            edge=\"end\"\n                                            checked={valueArray[itemIndex] === 1}\n                                            onChange={(event) => this.changeSetOption('SetOption' + soValue, event)}\n                                        // disabled\n                                        />\n                                    </ListItemSecondaryAction>\n                                </ListItem>\n                                <Divider variant=\"fullWidth\" component=\"li\" />\n                            </React.Fragment>\n                        )\n                    }\n                })\n            }\n        })\n    }\n\n    getPanelCommandData = command => (event, isExpanded) => {\n        event.stopPropagation()\n        if (isExpanded) {\n            this.deviceConnector.performCommandOnDeviceDirect(command);\n        }\n    }\n\n    getAvailableGPIOS() {\n        var availableGPIOs = []\n\n        var gpioObject = Object.keys(this.state.deviceInfo.gpiosResponse)\n\n        for (let key of gpioObject) {\n            for (let [gpioNum, gpioName] of Object.entries(this.state.deviceInfo.gpiosResponse[key])) {\n                availableGPIOs.push({ gpioNum: gpioNum, gpioName: gpioName })\n            }\n        }\n\n        availableGPIOs.push({ gpioNum: 255, gpioName: \"User\" })\n        return availableGPIOs\n    }\n\n    getGPIOName(gpio) {\n        var keys = Object.keys(this.state.deviceInfo.gpiosResponse)\n\n        if (gpio === 255) {\n            return 'User'\n        }\n\n        for (let n = 0; n < keys.length; n++) {\n            // console.log(\"Keys %s\", this.state.deviceInfo.gpiosResponse[keys[n]])\n            if (!Array.isArray(this.state.deviceInfo.gpiosResponse[keys[n]])) {\n                if (this.state.deviceInfo.gpiosResponse[keys[n]][gpio]) {\n                    return this.state.deviceInfo.gpiosResponse[keys[n]][gpio]\n                }\n            } else {\n                for (let i = 0; i < this.state.deviceInfo.gpiosResponse[keys[n]].length; i++) {\n                    if (this.state.deviceInfo.gpiosResponse[keys[n]][i].startsWith(gpio.toString() + ' ')) {\n                        return this.state.deviceInfo.gpiosResponse[keys[n]][i].replace(gpio.toString(), \"\")\n                    }\n                }\n            }\n        }\n\n        return 'Unknown'\n    }\n\n    onTemplateGPIOChanged(gpioindex, event) {\n        let newTemplate = Object.assign({}, this.state.currentTemplate)\n        newTemplate.GPIO[gpioindex] = parseInt(event.target.value, 10)\n        this.setState({ currentTemplate: newTemplate })\n    }\n\n\n    onTemplateNameUpdated(oldName, newName) {\n        let newTemplate = Object.assign({}, this.state.currentTemplate)\n        newTemplate.NAME = newName\n        this.setState({ currentTemplate: newTemplate })\n    }\n\n    onTemplateFlagChanged(event) {\n        let newTemplate = Object.assign({}, this.state.currentTemplate)\n        newTemplate.FLAG = parseInt(event.target.value, 10)\n        this.setState({ currentTemplate: newTemplate })\n    }\n\n    onTemplateBaseChanged(event) {\n        let newTemplate = Object.assign({}, this.state.currentTemplate)\n        newTemplate.BASE = parseInt(event.target.value, 10)\n        this.setState({ currentTemplate: newTemplate })\n    }\n\n    getAvailableModules() {\n        var availableModules = []\n\n        var moduleObject = Object.keys(this.state.deviceInfo.modulesResponse)\n\n        for (let key of moduleObject) {\n            for (let [moduleNum, moduleName] of Object.entries(this.state.deviceInfo.modulesResponse[key])) {\n                availableModules.push({ moduleNum: moduleNum, moduleName: moduleName })\n            }\n        }\n\n        return availableModules\n    }\n\n    renderTemplateResponse() {\n\n        return (\n            <Table size=\"small\">\n                <TableBody>\n                    <TableRow>\n                        <TableCell>NAME</TableCell>\n                        <TableCell><EditableSetting settingUpdatedCallback={this.onTemplateNameUpdated.bind(this)} currentValue={this.state.currentTemplate.NAME} /></TableCell>\n                    </TableRow>\n\n                    {\n                        this.state.currentTemplate.GPIO.map((gpio, index) => {\n                            return (\n                                <TableRow>\n                                    <TableCell>{`GPIO${templateGPIOIndex[index]}`}</TableCell>\n                                    <TableCell>\n                                        <FormControl>\n                                            <Select\n                                                labelId={`template-select-label-gpio${index}`}\n                                                id=\"weblog-select\"\n                                                value={gpio}\n                                                onChange={(event) => this.onTemplateGPIOChanged(index, event)}\n                                            >\n                                                {this.getAvailableGPIOS().map((availableGPIO, index) => {\n                                                    return <MenuItem value={availableGPIO.gpioNum}>{`${availableGPIO.gpioName} (${availableGPIO.gpioNum})`}</MenuItem>\n                                                })}\n                                            </Select>\n                                        </FormControl>\n                                    </TableCell>\n                                </TableRow>\n                            )\n                        })\n                    }\n\n                    <TableRow>\n                        <TableCell>FLAG</TableCell>\n                        <TableCell>\n                            <FormControl>\n                                <Select\n                                    labelId={`template-select-label-flag`}\n                                    id=\"template-flag\"\n                                    value={this.state.currentTemplate.FLAG}\n                                    onChange={(event) => this.onTemplateFlagChanged(event)}\n                                >\n                                    {templateFlagOptions.map((templateFlag, index) => {\n                                        return <MenuItem value={templateFlag.value}>{`${templateFlag.text} (${templateFlag.value})`}</MenuItem>\n                                    })}\n                                </Select>\n                            </FormControl>\n                        </TableCell>\n                    </TableRow>\n\n                    <TableRow>\n                        <TableCell>BASE</TableCell>\n                        <TableCell>\n                            <FormControl>\n                                <Select\n                                    labelId={`template-select-label-module`}\n                                    id=\"template-module\"\n                                    value={this.state.currentTemplate.BASE}\n                                    onChange={(event) => this.onTemplateBaseChanged(event)}\n                                >\n                                    {this.getAvailableModules().map((mod, index) => {\n                                        return <MenuItem value={mod.moduleNum}>{`${mod.moduleName} (${mod.moduleNum})`}</MenuItem>\n                                    })}\n                                </Select>\n                            </FormControl>\n                        </TableCell>\n                    </TableRow>\n\n                </TableBody>\n            </Table>\n\n        )\n    }\n\n    saveTemplate(event) {\n        event.stopPropagation()\n        this.deviceConnector.performCommandOnDevice(`Template ${JSON.stringify(this.state.currentTemplate)}`)\n        setTimeout(() => this.setState({ online: false, pendingCommand: 'Template' }), 1000)\n    }\n\n    resetTemplate(event) {\n        event.stopPropagation()\n        this.setState({ currentTemplate: this.state.deviceInfo.templateResponse})\n    }\n\n    isTemplateRenderable() {\n        return this.state.deviceInfo.templateResponse && this.state.deviceInfo.gpiosResponse && this.state.deviceInfo.modulesResponse\n    }\n\n    renderDetailsTemplate() {\n        return (\n            <ExpansionPanel key=\"TemplateDetailsExpansionPanel\" onChange={this.getPanelCommandData('Template')}>\n                <ExpansionPanelSummary\n                    expandIcon={<ExpandMoreIcon />}\n                    aria-controls=\"panel1a-content\"\n                    id=\"panel1a-header\"\n                >\n                    <Typography>Template</Typography>\n                </ExpansionPanelSummary>\n                <ExpansionPanelDetails>\n\n                    {\n                        this.isTemplateRenderable() ? this.renderTemplateResponse() : <CircularProgress /> \n                    }\n\n                </ExpansionPanelDetails>\n\n                { this.isTemplateRenderable() ? (\n                    <ExpansionPanelActions>\n                        <Button size=\"small\" variant=\"contained\" onClick={(event) => this.resetTemplate(event)}>Reset Template</Button>\n                        <Button size=\"small\" variant=\"contained\" onClick={(event) => this.saveTemplate(event)}>Save Template</Button>\n                    </ExpansionPanelActions>\n                    ) : \"\"\n                }\n            </ExpansionPanel>\n        )\n    }\n\n    renderGPIOResponse() {\n\n        return (\n            <Table size=\"small\">\n                <TableBody>\n\n                    {this.deviceConfig.gpioResponseFormatter(this.state.deviceInfo.gpio255Response).map((gpioObj, index) => {\n                        return (\n                            <TableRow>\n                                <TableCell>{gpioObj.gpio}</TableCell>\n                        <TableCell>{gpioObj.gpioDeviceType} ( {gpioObj.gpioDeviceName} )</TableCell>\n                            </TableRow>\n                        )\n                    })}\n\n                </TableBody>\n            </Table>\n        )\n    }\n\n    onModuleTypeChanged(event) {\n        event.stopPropagation()\n        this.setState( {currentModuleType: event.target.value})\n    }\n\n    onTemplateGPIOChanged(gpio, event) {\n        event.stopPropagation()\n        let newConfig = Object.assign([], this.state.currentModuleConfig);\n        for (let gpioObj of newConfig) {\n            if (gpioObj.gpio === gpio) {\n                gpioObj.gpioDeviceType = event.target.value\n                break\n            }\n        }\n\n        this.setState( {currentModuleConfig: newConfig} )\n    }\n\n    saveModuleConfiguration(event) {\n        event.stopPropagation()\n        let request = `/md?g99=${this.state.currentModuleType - 1}`\n\n        this.state.currentModuleConfig.forEach(function (gpio, index) {\n            request += `&g${gpio.gpio.replace('GPIO', '')}=${gpio.gpioDeviceType}`\n        })\n\n        request += '&save='\n\n        this.deviceConnector.performRequestOnDevice(request)\n        console.log(`Save Module Configuration : ${request}`)\n        setTimeout(() => this.setState({ online: false, pendingCommand: 'GPIO' }), 1000)\n    }\n\n    resetModuleConfiguration(event) {\n        let moduleType = Object.keys(this.state.deviceInfo.moduleResponse.Module)[0]\n        let moduleConfig = this.deviceConfig.gpioResponseFormatter(this.state.deviceInfo.gpioResponse)\n\n        this.setState ( { currentModuleType: moduleType, currentModuleConfig: moduleConfig})\n    }\n\n    renderGPIOConfiguration() {\n\n        return (\n            <Table size=\"small\">\n                <TableBody>\n                    <TableRow>\n                        <TableCell>Module Type</TableCell>\n                        <TableCell>\n                            <FormControl>\n                                <Select\n                                    labelId={`template-select-label-module`}\n                                    id=\"template-module\"\n                                    value={this.state.currentModuleType}\n                                    onChange={(event) => this.onModuleTypeChanged(event)}\n                                >\n                                    {this.getAvailableModules().map((mod, index) => {\n                                        return <MenuItem value={mod.moduleNum}>{`${mod.moduleName} (${mod.moduleNum})`}</MenuItem>\n                                    })}\n                                </Select>\n                            </FormControl>\n                        </TableCell>\n                    </TableRow>\n\n\n                    {\n                        this.state.currentModuleConfig.map((gpioObj, index) => {\n                            return (\n                                <TableRow>\n                                    <TableCell>{gpioObj.gpio}</TableCell>\n                                    <TableCell>\n                                        <FormControl>\n                                            <Select\n                                                labelId={`template-select-label-gpio${index}`}\n                                                id=\"weblog-select\"\n                                                value={gpioObj.gpioDeviceType}\n                                                onChange={(event) => this.onTemplateGPIOChanged(gpioObj.gpio, event)}\n                                            >\n                                                {this.getAvailableGPIOS().map((availableGPIO, index) => {\n                                                    return <MenuItem value={availableGPIO.gpioNum}>{`${availableGPIO.gpioName} (${availableGPIO.gpioNum})`}</MenuItem>\n                                                })}\n                                            </Select>\n                                        </FormControl>\n                                    </TableCell>\n                                </TableRow>\n                            )\n                        })\n                    }\n                </TableBody>\n            </Table>\n\n        )\n    }\n\n    isModuleConfigurationRenderable() {\n        return this.state.deviceInfo.gpioResponse && this.state.deviceInfo.gpiosResponse && this.state.deviceInfo.modulesResponse\n    }\n\n    renderModuleConfiguration() {\n        return (\n            <ExpansionPanel key=\"ModuleConfigurationExpansionPanel\" onChange={this.getPanelCommandData('GPIO')}>\n                <ExpansionPanelSummary\n                    expandIcon={<ExpandMoreIcon />}\n                    aria-controls=\"panel1a-content\"\n                    id=\"panel1a-header\"\n                >\n                    <Typography>Module GPIO Configuration</Typography>\n                </ExpansionPanelSummary>\n                <ExpansionPanelDetails>\n\n                    {\n                        this.isModuleConfigurationRenderable() ? this.renderGPIOConfiguration() : <CircularProgress /> \n                    }\n\n                </ExpansionPanelDetails>\n\n                { this.isModuleConfigurationRenderable() ? (\n                    <ExpansionPanelActions>\n                        <Button size=\"small\" variant=\"contained\" onClick={(event) => this.resetModuleConfiguration(event)}>Reset Module Configuration</Button>\n                        <Button size=\"small\" variant=\"contained\" onClick={(event) => this.saveModuleConfiguration(event)}>Save Module Configuration</Button>\n                    </ExpansionPanelActions>\n                    ) : \"\"\n                }\n            </ExpansionPanel>\n        )\n    }\n\n    renderDetailsGPIO() {\n        return (\n            <ExpansionPanel key=\"GPIODetailsExpansionPanel\" onChange={this.getPanelCommandData('GPIO 255')}>\n                <ExpansionPanelSummary\n                    expandIcon={<ExpandMoreIcon />}\n                    aria-controls=\"panel1a-content\"\n                    id=\"panel1a-header\"\n                >\n                    <Typography>Module GPIO</Typography>\n                </ExpansionPanelSummary>\n                <ExpansionPanelDetails>\n\n                    {!this.state.deviceInfo.gpio255Response || !this.state.deviceInfo.gpiosResponse ? <CircularProgress /> :\n                        this.renderGPIOResponse()\n                    }\n\n                </ExpansionPanelDetails>\n            </ExpansionPanel>\n        )\n    }\n\n    renderDetailsConnectivity() {\n        return (\n            <React.Fragment>\n                <ExpansionPanel key=\"ConnectivityDetailsExpansionPanel\">\n                    <ExpansionPanelSummary\n                        expandIcon={<ExpandMoreIcon />}\n                        aria-controls=\"panel1a-content\"\n                        id=\"panel1a-header\"\n                    >\n                        <Typography>Connectivity</Typography>\n                    </ExpansionPanelSummary>\n                    <ExpansionPanelDetails>\n                        <Table size=\"small\">\n                            <TableBody>\n                                <TableRow>\n                                    <TableCell />\n                                    <TableCell>Wifi AP</TableCell>\n                                    <TableCell>{this.state.deviceInfo.status0Response.StatusSTS.Wifi.SSId}</TableCell>\n                                </TableRow>\n                                <TableRow>\n                                    <TableCell />\n                                    <TableCell>Wifi Strength</TableCell>\n                                    <TableCell>{this.state.deviceInfo.status0Response.StatusSTS.Wifi.RSSI}</TableCell>\n                                </TableRow>\n                                <TableRow>\n                                    <TableCell />\n                                    <TableCell>Wifi Channel</TableCell>\n                                    <TableCell>{this.state.deviceInfo.status0Response.StatusSTS.Wifi.Channel}</TableCell>\n                                </TableRow>\n                                <TableRow>\n                                    <TableCell />\n                                    <TableCell>Wifi BSSID</TableCell>\n                                    <TableCell>{this.state.deviceInfo.status0Response.StatusSTS.Wifi.BSSId}</TableCell>\n                                </TableRow>\n                            </TableBody>\n                        </Table>\n                    </ExpansionPanelDetails>\n                </ExpansionPanel>\n            </React.Fragment>\n        )\n    }\n\n    renderTypeSettings() {\n\n\n        return (\n            <React.Fragment>\n\n                {this.deviceConfig.settingsGroups.map((settings) => {\n                    return (\n                        <TableRow>\n                            <TableCell colSpan={3}>\n                                <SettingsGroup deviceConnector={this.deviceConnector} settingsGroup={settings} />\n                            </TableCell>\n                        </TableRow>\n                    )\n                })}\n\n                <TableRow>\n                    <TableCell colSpan={3}>\n                        {this.renderDetailsSetOptions()}\n                    </TableCell>\n                </TableRow>\n\n                <TableRow>\n                    <TableCell colSpan={3}>\n                        <Typography>Configuration Section</Typography>\n                    </TableCell>\n                </TableRow>\n\n                <TableRow>\n                    <TableCell colSpan={3}>\n                        {this.renderModuleConfiguration()}\n                    </TableCell>\n                </TableRow>\n\n\n                <TableRow>\n                    <TableCell colSpan={3}>\n                        {this.renderDetailsTemplate()}\n                    </TableCell>\n                </TableRow>\n\n                {Object.entries(this.deviceConfig.configuration).map(([commandGroupName, commandGroup]) => {\n                    return (\n                        <TableRow>\n                            <TableCell colSpan={3}>\n                                <CommandGroup groupType=\"Configuration\" commandGroupName={commandGroupName} commandGroup={commandGroup} deviceConnector={this.deviceConnector} />\n                            </TableCell>\n                        </TableRow>\n                    )\n                })}\n\n                <TableRow>\n                    <TableCell colSpan={3}>\n                        <Typography>Commands Section</Typography>\n                    </TableCell>\n                </TableRow>\n\n                {Object.entries(this.deviceConfig.commands).map(([commandGroupName, commandGroup]) => {\n                    return (\n                        <TableRow>\n                            <TableCell colSpan={3}>\n                                <CommandGroup groupType=\"Commands\" commandGroupName={commandGroupName} commandGroup={commandGroup} deviceConnector={this.deviceConnector} />\n                            </TableCell>\n                        </TableRow>\n                    )\n                })}\n\n\n            </React.Fragment>\n        )\n    }\n\n    renderTypeDetails() {\n\n        return (\n            <React.Fragment>\n                <TableRow>\n                    <TableCell colSpan={3}>\n                        {this.renderDetailsConnectivity()}\n                    </TableCell>\n                </TableRow>\n\n                <TableRow>\n                    <TableCell colSpan={3}>\n                        {this.renderModuleConfiguration()}\n                    </TableCell>\n                </TableRow>\n\n                <TableRow>\n                    <TableCell colSpan={3}>\n                        {this.renderDetailsGPIO()}\n                    </TableCell>\n                </TableRow>\n\n                {this.state.deviceInfo.status0Response.Status.Module === 0 ? (\n                    <TableRow>\n                        <TableCell colSpan={3}>\n                            {this.renderDetailsTemplate()}\n                        </TableCell>\n                    </TableRow>\n\n                )\n                    : null}\n\n                <TableRow>\n                    <TableCell colSpan={3}>\n                        {this.renderDetailsSetOptions()}\n                    </TableCell>\n                </TableRow>\n\n                <TableRow>\n                    <TableCell align=\"left\"><Typography>Status Report</Typography></TableCell>\n                    <TableCell align=\"center\" colSpan={2}>\n                        <Button variant=\"contained\" key=\"copy-to-clipboard-button\" onClick={(event) => copyToClipboard(JSON.stringify(this.state.deviceInfo.status0Response, null, 2))}>Copy to clipboard</Button>\n                    </TableCell>\n                </TableRow>\n\n                <TableRow>\n                    <TableCell colSpan={3}>\n                        {this.renderDetailsStatuses()}\n                    </TableCell>\n                </TableRow>\n            </React.Fragment>\n        )\n    }\n\n    onFriendlyNameUpdatedCallback(oldName, newName, index) {\n        this.deviceConnector.performCommandOnDevice(`FriendlyName${index + 1} ${newName}`)\n    }\n\n    renderTypeSettingsAndDetails(renderType) {\n        return (\n            <React.Fragment>\n                <Box display=\"flex\" flexDirection=\"column\" flexGrow={1} justifyItems=\"center\" justifyContent=\"center\">\n                    <Box display=\"flex\" flexDirection=\"column\" flexWrap=\"wrap\" justifyContent=\"space-around\" alignItems=\"center\">\n                        <Paper align=\"center\" style={{ width: 200, height: 200 }}>\n                            {this.renderDetailsImage()}\n                        </Paper>\n                    </Box>\n                    <Table size=\"medium\">\n                        <TableHead>\n                            <TableRow>\n                                <TableCell colSpan={2}></TableCell>\n                            </TableRow>\n                        </TableHead>\n                        <TableBody>\n                            <TableRow>\n                                <TableCell align=\"left\"><Typography>FriendlyName</Typography></TableCell>\n                                <TableCell align=\"center\" colSpan={2}>\n                                    <Box display=\"flex\" flexDirection=\"column\" flexGrow={1} justifyContent=\"center\" justifyItems=\"center\">\n                                        {\n                                            this.state.deviceInfo.status0Response.Status.FriendlyName.map((name, index) => {\n                                                return (\n                                                    <EditableSetting settingUpdatedCallback={(oldName, newName) => this.onFriendlyNameUpdatedCallback(oldName, newName, index)} currentValue={name} />\n                                                )\n                                            })\n                                        }\n                                    </Box>\n                                </TableCell>\n                            </TableRow>\n                            <TableRow>\n                                <TableCell align=\"left\"><Typography>Relays</Typography></TableCell>\n                                <TableCell align=\"center\" colSpan={2}>{this.renderDetailsControlsButtons('Table')}</TableCell>\n                            </TableRow>\n                            <TableRow>\n                                <TableCell align=\"left\"><Typography>Light Controls</Typography></TableCell>\n                                <TableCell align=\"center\" colSpan={2}>{this.renderDetailsControlsDimmers('Table')}</TableCell>\n                            </TableRow>\n\n                            {renderType === 'Details' ? this.renderTypeDetails() : null}\n                            {renderType === 'Settings' ? this.renderTypeSettings() : null}\n\n                        </TableBody>\n                    </Table>\n\n                </Box>\n            </React.Fragment>\n        )\n    }\n\n    render() {\n        // console.log('Tasmota Device renderType : %s', this.props.renderType)\n        switch (this.props['renderType']) {\n            case 'List':\n                return this.renderTypeList();\n\n            case 'Settings':\n            case 'Details':\n                return this.renderTypeSettingsAndDetails(this.props.renderType);\n\n            case 'Table_Status':\n                return this.renderTypeTableStatusRow();\n\n            case 'Table_Health':\n                return this.renderTypeTableHealthRow();\n\n            case 'Table_WIFI':\n                return this.renderTypeTableWifiRow()\n\n            case 'Table_Mqtt':\n                return this.renderTypeTableMqttRow()\n\n            case 'Table_Firmware':\n                return this.renderTypeTableFirmwareRow()\n\n\n            default:\n                return (\n                    <Typography>\n                        {/* {this.state.displayName} RenderType : {this.props.renderType} */}\n                    </Typography>\n                )\n                break\n        }\n    }\n}\n\nexport default withStyles(styles)(TasmotaDevice);","export default function(text) {\n    const el = document.createElement('textarea');\n    el.value = text\n    el.setAttribute('readonly', '');\n    el.style.position = 'absolute';\n    el.style.left = '-9999px';\n    document.body.appendChild(el);\n    el.select();\n    document.execCommand('copy');\n    document.body.removeChild(el);\n}","/*\n\n  Copyright (C) 2019  Shantur Rathore\n  \n  This program is free software: you can redistribute it and/or modify\n  it under the terms of the GNU General Public License as published by\n  the Free Software Foundation, either version 3 of the License, or\n  (at your option) any later version.\n  This program is distributed in the hope that it will be useful,\n  but WITHOUT ANY WARRANTY; without even the implied warranty of\n  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n  GNU General Public License for more details.\n  You should have received a copy of the GNU General Public License\n  along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\n*/\n\nimport ExpansionPanel from '@material-ui/core/ExpansionPanel';\nimport ExpansionPanelSummary from '@material-ui/core/ExpansionPanelSummary';\nimport Table from '@material-ui/core/Table';\nimport Box from '@material-ui/core/Box';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport DeleteIcon from '@material-ui/icons/Delete';\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\nimport SettingsApplicationsIcon from '@material-ui/icons/SettingsApplications';\nimport React from 'react';\nimport TasmotaDevice from '../DeviceTypes/TasmotaDevice';\nimport ActionButton from './ActionButton';\n\nclass DeviceList extends React.Component {\n    constructor(props) {\n        super(props);\n    }\n\n    renderItems() {\n        switch (this.props.displayMode) {\n            case \"List\":\n                return this.renderTypeList()\n\n            case \"Table_Status\":\n            case \"Table_Health\":\n            case \"Table_WIFI\":\n            case \"Table_Mqtt\":\n            case \"Table_Firmware\":\n                return this.renderTypeTable()\n\n            case \"Card\":\n                return this.renderTypeCard()\n\n        }\n    }\n\n    renderTypeList() {\n\n        return Object.keys(this.props.devices).map((mac, index) => {\n            let buttons = (\n                <div>\n                    {this.renderButton(\"Details\", \"details\", (event) => this.openDeviceDetails(mac, event), <SettingsApplicationsIcon />)}\n                    {this.renderButton(\"Delete\", \"delete\", (event) => this.deleteDevice(mac, event), <DeleteIcon />)}\n                </div>\n            )\n\n            return (\n                <ExpansionPanel key={mac}>\n                    <ExpansionPanelSummary\n                        expandIcon={<ExpandMoreIcon />}\n                        aria-controls=\"panel1c-content\"\n                        id=\"panel1c-header\"\n                    >\n                        <TasmotaDevice macAddress={mac} renderType={this.state.displayMode} deviceManager={this.props.deviceManager} actionButtons={buttons} />\n                    </ExpansionPanelSummary>\n                </ExpansionPanel>\n            )\n        })\n    }\n\n    renderTypeCard() {\n        return Object.keys(this.props.devices).map((mac, index) => {\n            return (\n                <TasmotaDevice macAddress={mac} renderType={this.props.displayMode} deviceManager={this.props.deviceManager} />\n            )\n        })\n    }\n\n    renderTableHeaderStatus() {\n        return (\n            <TableRow>\n                <TableCell align=\"center\">Friendly Name</TableCell>\n                <TableCell />\n                <TableCell>Module</TableCell>\n                <TableCell>Power</TableCell>\n                <TableCell>Light Controls</TableCell>\n            </TableRow>\n        )\n    }\n\n\n    renderTableHeaderHealth() {\n        return (\n            <TableRow>\n                <TableCell>Friendly Name</TableCell>\n                <TableCell />\n                <TableCell>RSSI</TableCell>\n                <TableCell>Uptime</TableCell>\n                <TableCell>Mqtt Count</TableCell>\n                <TableCell>Link Count</TableCell>\n                <TableCell>Downtime</TableCell>\n                <TableCell>Version</TableCell>\n                <TableCell>Core</TableCell>\n                <TableCell>Boot Count</TableCell>\n                <TableCell>Restart Reason</TableCell>\n                <TableCell>LoadAvg</TableCell>\n                <TableCell>Sleep</TableCell>\n            </TableRow>\n        )\n    }\n\n\n    renderTableHeaderFirmware() {\n        return (\n            <TableRow>\n                <TableCell>Friendly Name</TableCell>\n                <TableCell />\n                <TableCell>Version</TableCell>\n                <TableCell>Core</TableCell>\n                <TableCell>SDK</TableCell>\n                <TableCell>Program Size</TableCell>\n                <TableCell>Free</TableCell>\n                <TableCell>OtaURL</TableCell>\n            </TableRow>\n        )\n    }\n\n    renderTableHeaderWifi() {\n        return (\n            <TableRow>\n                <TableCell>Friendly Name</TableCell>\n                <TableCell />\n                <TableCell>RSSI</TableCell>\n                <TableCell>WifiPower</TableCell>\n                <TableCell>BSSID</TableCell>\n                <TableCell>Link Count</TableCell>\n                <TableCell>Downtime</TableCell>\n                <TableCell>Hostname</TableCell>\n                <TableCell>Mac Address</TableCell>\n                <TableCell>IP Address</TableCell>\n                <TableCell>Gateway</TableCell>\n                <TableCell>SSID</TableCell>\n                <TableCell>Channel</TableCell>\n            </TableRow>\n        )\n    }\n\n\n    renderTableHeaderMqtt() {\n        return (\n            <TableRow>\n                <TableCell>Friendly Name</TableCell>\n                <TableCell />\n                <TableCell>RSSI</TableCell>\n                <TableCell>Mqtt Count</TableCell>\n                <TableCell>Topic</TableCell>\n                <TableCell>Full Topic</TableCell>\n                <TableCell>Command Topic</TableCell>\n                <TableCell>Stat Topic</TableCell>\n                <TableCell>Tele Topic</TableCell>\n                <TableCell>Fallback Topic</TableCell>\n                <TableCell>Group Topic</TableCell>\n                <TableCell>Mqtt Host</TableCell>\n                <TableCell>Mqtt Port</TableCell>\n                <TableCell>Mqtt Client</TableCell>\n            </TableRow>\n        )\n    }\n    renderTableHeader() {\n        // console.log(this.props.displayMode)\n        switch (this.props.displayMode) {\n            case 'Table_Status':\n                return this.renderTableHeaderStatus()\n\n            case 'Table_Health':\n                return this.renderTableHeaderHealth()\n\n            case 'Table_WIFI':\n                return this.renderTableHeaderWifi()\n\n            case 'Table_Mqtt':\n                return this.renderTableHeaderMqtt()\n\n            case 'Table_Firmware':\n                return this.renderTableHeaderFirmware()\n\n        }\n    }\n\n    renderTypeTable() {\n        return (\n\n            <Table stickyHeader aria-label=\"simple table\" >\n                {Object.keys(this.props.deviceSections).map((section, index) => {\n                    return (\n                        <React.Fragment>\n                            {Object.keys(this.props.deviceSections[section].devices).length > 0 ?\n                                <TableRow><h3>{section}</h3></TableRow> : null}\n\n                            {index === 0 ?\n                                <TableHead>\n                                    {this.renderTableHeader()}\n                                </TableHead>\n                                : null}\n                            <TableBody>\n                                {Object.keys(this.props.deviceSections[section].devices).map((mac, index) => {\n                                    let buttons = this.props.deviceSections[section].itemButtons.map((button, index) => {\n                                        return (\n                                            <ActionButton\n                                                key={mac + button.label}\n                                                toolTip={button.toolTip}\n                                                label={button.label}\n                                                icon={button.icon}\n                                                onButtonClick={(event) => button.onButtonClick(mac, event)}\n                                            />\n                                        )\n                                    })\n\n                                    return <TasmotaDevice key={mac} macAddress={mac} renderType={this.props.displayMode} deviceManager={this.props.deviceManager} actionButtons={buttons} />\n                                })\n                                }\n                            </TableBody>\n                        </React.Fragment>\n                    )\n                })}\n\n            </Table>\n        )\n    }\n\n    render() {\n        return this.renderItems()\n    }\n}\nexport default DeviceList","/*\n\n  Copyright (C) 2019  Shantur Rathore\n  \n  This program is free software: you can redistribute it and/or modify\n  it under the terms of the GNU General Public License as published by\n  the Free Software Foundation, either version 3 of the License, or\n  (at your option) any later version.\n  This program is distributed in the hope that it will be useful,\n  but WITHOUT ANY WARRANTY; without even the implied warranty of\n  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n  GNU General Public License for more details.\n  You should have received a copy of the GNU General Public License\n  along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\n*/\n\nimport React from 'react'\nimport Box from '@material-ui/core/Box';\nimport HealingIcon from '@material-ui/icons/Healing';\nimport SettingsInputAntennaIcon from '@material-ui/icons/SettingsInputAntenna';\nimport SystemUpdateAltIcon from '@material-ui/icons/SystemUpdateAlt';\nimport TableChartIcon from '@material-ui/icons/TableChart';\nimport WifiIcon from '@material-ui/icons/Wifi';\nimport ActionButton from './ActionButton'\n\nclass DisplayModeButtons extends React.Component {\n\n    render() {\n        return (\n            <Box display=\"flex\" flexGrow={1} justifyContent=\"flex-start\">\n                <ActionButton\n                    toolTip=\"Status View\"\n                    label=\"status\"\n                    icon={<TableChartIcon />}\n                    onButtonClick={() => this.props.setState({ displayMode: \"Table_Status\" })}\n                    selected={this.props.displayMode === \"Table_Status\"}\n                    selectedIcon={<TableChartIcon color=\"primary\" />}\n                />\n\n                <ActionButton\n                    toolTip=\"Health View\"\n                    label=\"health\"\n                    icon={<HealingIcon />}\n                    onButtonClick={() => this.props.setState({ displayMode: \"Table_Health\" })}\n                    selected={this.props.displayMode === \"Table_Health\"}\n                    selectedIcon={<HealingIcon color=\"primary\" />}\n                />\n\n                <ActionButton\n                    toolTip=\"Firmware View\"\n                    label=\"firmware\"\n                    icon={<SystemUpdateAltIcon />}\n                    onButtonClick={() => this.props.setState({ displayMode: \"Table_Firmware\" })}\n                    selected={this.props.displayMode === \"Table_Firmware\"}\n                    selectedIcon={<SystemUpdateAltIcon color=\"primary\" />}\n                />\n\n\n                <ActionButton\n                    toolTip=\"Wifi View\"\n                    label=\"wifi\"\n                    icon={<WifiIcon />}\n                    onButtonClick={() => this.props.setState({ displayMode: \"Table_WIFI\" })}\n                    selected={this.props.displayMode === \"Table_WIFI\"}\n                    selectedIcon={<WifiIcon color=\"primary\" />}\n                />\n\n                <ActionButton\n                    toolTip=\"Mqtt View\"\n                    label=\"MQTT\"\n                    icon={<SettingsInputAntennaIcon />}\n                    onButtonClick={() => this.props.setState({ displayMode: \"Table_Mqtt\" })}\n                    selected={this.props.displayMode === \"Table_Mqtt\"}\n                    selectedIcon={<SettingsInputAntennaIcon color=\"primary\" />}\n                />\n\n            </Box>)\n    }\n}\n\nexport default DisplayModeButtons","/*\n\n  Copyright (C) 2019  Shantur Rathore\n  \n  This program is free software: you can redistribute it and/or modify\n  it under the terms of the GNU General Public License as published by\n  the Free Software Foundation, either version 3 of the License, or\n  (at your option) any later version.\n  This program is distributed in the hope that it will be useful,\n  but WITHOUT ANY WARRANTY; without even the implied warranty of\n  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n  GNU General Public License for more details.\n  You should have received a copy of the GNU General Public License\n  along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\n*/\n\nimport Box from '@material-ui/core/Box';\nimport Container from '@material-ui/core/Container';\nimport DeleteIcon from '@material-ui/icons/Delete';\nimport SettingsApplicationsIcon from '@material-ui/icons/SettingsApplications';\nimport React from 'react';\nimport DeviceList from '../Components/DeviceList';\nimport DisplayTypeButtons from '../Components/DisplayModeButtons';\nimport InfoIcon from '@material-ui/icons/Info';\nimport CallToActionIcon from '@material-ui/icons/CallToAction';\nimport OpenInBrowserIcon from '@material-ui/icons/OpenInBrowser';\n\nclass Devices extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            devices: this.props.deviceManager.getDevices(),\n            displayMode: this.props.appConfig.getAppConfig('device_view_mode') || \"Table_Status\",\n        }\n    }\n\n    buttons = [{\n        toolTip: \"Details\",\n        label: \"details\",\n        icon: <InfoIcon />,\n        onButtonClick: (mac, event) => this.openDeviceDetails(mac, event),\n    }, {\n        toolTip: \"Settings\",\n        label: \"settings\",\n        icon: <SettingsApplicationsIcon />,\n        onButtonClick: (mac, event) => this.openDeviceSettings(mac, event),\n    }, {\n        toolTip: \"Console\",\n        label: \"console\",\n        icon: <CallToActionIcon />,\n        onButtonClick: (mac, event) => this.openDeviceConsole(mac, event),\n    }, {\n        toolTip: \"WebUI\",\n        label: \"webui\",\n        icon: <OpenInBrowserIcon />,\n        onButtonClick: (mac, event) => this.openWebUI(mac, event),\n    }, {\n        toolTip: \"Delete\",\n        label: \"delete\",\n        icon: <DeleteIcon />,\n        onButtonClick: (mac, event) => this.deleteDevice(mac, event),\n    }]\n\n    openDeviceDetails = (macAddress, event) => {\n        event.stopPropagation();\n        this.props.history.push('/details/' + macAddress);\n    }\n\n    openDeviceSettings = (macAddress, event) => {\n        event.stopPropagation();\n        this.props.history.push('/settings/' + macAddress);\n    }\n\n    openDeviceConsole = (macAddress, event) => {\n        event.stopPropagation();\n        this.props.history.push('/console/' + macAddress);\n    }\n\n    openWebUI  = (macAddress, event) => {\n        event.stopPropagation();\n        let ip = this.props.deviceManager.getDevice(macAddress).status0Response.StatusNET.IPAddress\n        window.open(`http://${ip}`)\n    }\n\n    deleteDevice = (macAddress, event) => {\n        event.stopPropagation();\n        this.props.deviceManager.removeDevice(macAddress);\n        const newDevices = this.props.deviceManager.getDevices();\n        this.setState({\n            devices: newDevices\n        });\n    }\n\n    componentDidUpdate(prevProps, prevState, snapshot) {\n        if (prevState.displayMode !== this.state.displayMode) {\n            this.props.appConfig.putAppConfig('device_view_mode', this.state.displayMode)\n        }\n    }\n\n    componentDidMount() {\n        window.gtag('event', 'Devices', { 'value' : this.state.displayMode });\n        window.gtag('event', 'screen_view', { 'screen_name': 'Devices'});\n    }\n\n    render() {\n\n        return (\n            <Box display=\"flex\" flexGrow={1} flexDirection=\"column\" style={{ overflow: \"visible\", position: \"absolute\" }}>\n                <Box display=\"flex\" flexDirection=\"row\" alignItems=\"center\">\n                    <h1>Devices</h1>\n                    <DisplayTypeButtons displayMode={this.state.displayMode} setState={(state) => this.setState(state)} />\n                </Box>\n                <DeviceList\n                    displayMode={this.state.displayMode}\n                    deviceSections={{ \"\": { devices: this.state.devices, itemButtons: this.buttons } }}\n                    deviceManager={this.props.deviceManager}\n                />\n\n            </Box>\n        );\n    }\n}\nexport default Devices","/*\n\n  Copyright (C) 2019  Shantur Rathore\n  \n  This program is free software: you can redistribute it and/or modify\n  it under the terms of the GNU General Public License as published by\n  the Free Software Foundation, either version 3 of the License, or\n  (at your option) any later version.\n  This program is distributed in the hope that it will be useful,\n  but WITHOUT ANY WARRANTY; without even the implied warranty of\n  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n  GNU General Public License for more details.\n  You should have received a copy of the GNU General Public License\n  along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\n*/\n\nimport superagent from 'superagent';\n\nconst commands = {\n    Status0: 'Status 0',\n    State: 'State',\n    Status8: 'Status 8',\n    Module: 'Module',\n    WifiPower: 'WifiPower',\n}\n\nclass TasmotaDeviceConnector {\n\n    deviceIPAddress = \"\";\n    deviceListeners = [];\n    timer = null;\n    // responseMap = [{}];\n\n    constructor(ipAddress, authInfo) {\n        this.deviceIPAddress = ipAddress;\n        this.online = false;\n        this.authInfo = authInfo\n    }\n\n    updateIpAddress(ipAddress) {\n        if (this.deviceIPAddress !== ipAddress) {\n            this.deviceIPAddress = ipAddress\n            this.requestDeviceStatus()\n        }\n    }\n\n    connect(listener) {\n        let index = this.deviceListeners.indexOf(listener)\n        if (index === -1) {\n            this.deviceListeners.push(listener);\n        }\n\n        if (this.deviceListeners.length === 1) {\n            this.resume();\n        }\n    }\n\n    disconnect(listener) {\n        let index = this.deviceListeners.indexOf(listener)\n        if (index !== -1) {\n            this.deviceListeners.splice(index, 1)\n        }\n\n        if (this.deviceListeners.length === 0) {\n            this.pause();\n        }\n    }\n\n    disconnectAll() {\n        this.deviceListeners.forEach((listener) => {\n            this.disconnect(listener)\n        })\n    }\n\n    pause() {\n        if (this.timer) {\n            clearInterval(this.timer);\n            this.timer = null;\n        }\n    }\n\n    resume() {\n        this.pause(); // Clear previous Timer\n        this.timer = setInterval(this.requestDeviceStatus.bind(this), 15000);\n        this.getStatus0();\n    }\n\n    requestDeviceStatus() {\n        this.getState()\n    }\n\n    getStatus0() {\n        this.performCommandOnDeviceDirect(commands.Status0);\n    }\n\n    getWifiPower() {\n        this.performCommandOnDeviceDirect(commands.WifiPower);\n    }\n\n    getModule() {\n        this.performCommandOnDeviceDirect(commands.Module);\n    }\n\n    getState() {\n        this.performCommandOnDeviceDirect(commands.State);\n    }\n\n    getStatus8() {\n        this.performCommandOnDeviceDirect(commands.Status8);\n    }\n\n    onDeviceRequestResponse(args) {\n        console.log(`Request ${args.key} Url : ${args.url} Response: %O`, args.response ? args.response.body : null)\n        this.deviceListeners.forEach(function (deviceListener, index) {\n            if (deviceListener.onDeviceRequestResponse) {\n                deviceListener.onDeviceRequestResponse(args.key, args.success, args.success ? args.response.body : null)\n            }\n        });\n    }\n\n    onCommandResponse(args) {\n        if (args.key === commands.State || args.key === commands.Status0) {\n            this.online = args.success\n        }\n        console.log(`Command ${args.key} Url : ${args.url} Response: %O`, args.response ? args.response.body : null)\n        this.deviceListeners.forEach(function (deviceListener, index) {\n            deviceListener.onCommandResponse(args.key, args.success, args.success ? args.response.body : null)\n        });\n\n        if (!args.success) {\n            console.log(`Command ${args.key} failed. Url : ${args.url} Response: %O`, args.response)\n        }\n\n        if (args.key === commands.State) {\n            this.getStatus8()\n        } else if (args.key === commands.Status0) {\n            this.getModule()\n        } else if (args.key === commands.Module) {\n            this.getWifiPower()\n        }\n    }\n\n    performCommandOnDevice(cmnd) {\n        this.performCommandOnDeviceDirect(cmnd);\n        this.getStatus0();\n    }\n\n    performRequestOnDevice(request) {\n        this.performRequestOnDeviceDirect(request)\n    }\n\n    performRequestOnDeviceDirect(request) {\n        var callback = function (err, response) {\n            // console.log (\"Error : %O Response : %O\", err, response);\n            this.onDeviceRequestResponse({ key: this.request, response: response, error: err, url: this.url, ip: this.ip, success: err ? false : true });\n        }\n        let url = 'http://' + this.deviceIPAddress + request\n\n        if (this.authInfo) {\n            url += `&user=${encodeURIComponent(this.authInfo.username)}&password=${encodeURIComponent(this.authInfo.password)}`\n        }\n\n        if (window.runtimeConfig.proxyMode) {\n            url = '?url=' + encodeURIComponent(url)\n        }\n\n        superagent.get(url)\n            .timeout({\n                response: 5000,  // Wait 5 seconds for the server to start sending,\n                deadline: 10000, // but allow 1 minute for the file to finish loading.\n            })\n            .end(callback.bind({ onDeviceRequestResponse: this.onDeviceRequestResponse.bind(this), ip: this.deviceIPAddress, url: url, request: request }))\n    }\n\n    performCommandOnDeviceDirect(cmnd) {\n        var callback = function (err, response) {\n            // console.log (\"Error : %O Response : %O\", err, response);\n            this.onCommandResponse({ key: this.cmnd, response: response, error: err, url: this.url, ip: this.ip, success: err ? false : true });\n        }\n        let url = 'http://' + this.deviceIPAddress + '/cm?cmnd=' + encodeURIComponent(cmnd);\n\n        if (this.authInfo) {\n            url += `&user=${encodeURIComponent(this.authInfo.username)}&password=${encodeURIComponent(this.authInfo.password)}`\n        }\n\n        if (window.runtimeConfig.proxyMode) {\n            url = '?url=' + encodeURIComponent(url)\n        }\n\n        superagent.get(url)\n            .timeout({\n                response: 5000,  // Wait 5 seconds for the server to start sending,\n                deadline: 10000, // but allow 1 minute for the file to finish loading.\n            })\n            .end(callback.bind({ onCommandResponse: this.onCommandResponse.bind(this), ip: this.deviceIPAddress, url: url, cmnd: cmnd }))\n    }\n}\n\nexport default TasmotaDeviceConnector;\n","/*\n\n  Copyright (C) 2019  Shantur Rathore\n  \n  This program is free software: you can redistribute it and/or modify\n  it under the terms of the GNU General Public License as published by\n  the Free Software Foundation, either version 3 of the License, or\n  (at your option) any later version.\n  This program is distributed in the hope that it will be useful,\n  but WITHOUT ANY WARRANTY; without even the implied warranty of\n  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n  GNU General Public License for more details.\n  You should have received a copy of the GNU General Public License\n  along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\n*/\n\nimport Commands from './Commands.json'\n\nconst TasmotaConfig_06070000 = {\n    setOptionsStatusMaps: [{\n        structName: \"SysBitfield\",\n        setOptionStart: 0,\n        bitSize: 1,\n        items: [\n            {\n                name: 'save_state',\n                description: 'Save power state and use after restart',\n            }, {\n                name: 'button_restrict',\n                description: 'Control button multipress',\n            }, {\n                name: 'ex_value_units',\n                description: 'Add units to JSON messages',\n            }, {\n                name: 'mqtt_enabled',\n                description: 'Control MQTT',\n            }, {\n                name: 'mqtt_response',\n                description: 'Switch between MQTT Result or Command',\n            }, {\n                name: 'mqtt_power_retain',\n                description: '',\n            }, {\n                name: 'mqtt_button_retain',\n                description: '',\n            }, {\n                name: 'mqtt_switch_retain',\n                description: '',\n            }, {\n                name: 'temperature_conversion',\n                description: 'Switch between Celsius or Fahreheit',\n            }, {\n                name: 'mqtt_sensor_retain',\n                description: 'CMDN_SENSORRETAIN',\n            }, {\n                name: 'mqtt_offline',\n                description: 'Control MQTT LWT message format',\n            }, {\n                name: 'button_swap',\n                description: 'Swap button single and double press functionality',\n            }, {\n                name: 'stop_flash_rotate',\n                description: 'Switch between dynamic or fixed slot flash save location',\n            }, {\n                name: 'button_single',\n                description: 'Support only single press to speed up button press recognition',\n            }, {\n                name: 'interlock',\n                description: '',\n            }, {\n                name: 'pwm_control',\n                description: 'Switch between commands PWM or COLOR/DIMMER/CT/CHANNEL',\n            }, {\n                name: 'ws_clock_reverse',\n                description: 'Set addressable LED Clock scheme parameter',\n            }, {\n                name: 'decimal_text',\n                description: 'Switch between decimal or hexadecimal output',\n            }, {\n                name: 'light_signal',\n                description: 'Pair light signal with CO2 sensor',\n            }, {\n                name: 'hass_discovery',\n                description: 'Control Home Assistant Automatic discovery',\n            }, {\n                name: 'not_power_linked',\n                description: 'Control power in relation fo Dimmer/Color/CT changes',\n            }, {\n                name: 'no_power_on_check',\n                description: 'Show voltage even if powered off',\n            }, {\n                name: 'mqtt_serial',\n                description: '',\n            }, {\n                name: 'mqtt_serial_raw',\n                description: '',\n            }, {\n                name: 'pressure_conversion',\n                description: 'Switch between hPa or mmHg pressure unit',\n            }, {\n                name: 'knx_enabled',\n                description: '',\n            }, {\n                name: 'device_index_enable',\n                description: 'Switch between POWER or POWER1',\n            }, {\n                name: 'knx_enable_enhancement',\n                description: '',\n            }, {\n                name: 'rf_receive_decimal',\n                description: 'RF Receive data format',\n            }, {\n                name: 'ir_receive_decimal',\n                description: 'IR Receive data format',\n            }, {\n                name: 'hass_light',\n                description: 'Enforce HASS Autodiscovery as light',\n            }, {\n                name: 'global_state',\n                description: 'Control link led blinking',\n            }\n        ]\n    }, {\n        structName: \"SysBitfield2\",\n        setOptionStart: 32,\n        bitSize: 1,\n        items: [],\n    }, {\n        structName: \"SysBitfield3\",\n        setOptionStart: 50,\n        bitSize: 1,\n        items: [\n            {\n                name: 'timers_enable',\n                description: '',\n            }, {\n                name: 'user_esp8285_enable',\n                description: 'Enable ESP8285 User GPIOs',\n            }, {\n                name: 'time_append_timezone',\n                description: 'Append timezone to JSON time',\n            }, {\n                name: 'gui_hostname_ip',\n                description: 'Show hostname and IP address in GUI main menu',\n            }, {\n                name: 'tuya_apply_o20',\n                description: 'Apple SetOption20 settings to Tuya device',\n            }, {\n                name: 'mdns_enabled',\n                description: 'Control mDNS Service',\n            }, {\n                name: 'use_wifi_scan',\n                description: 'Scan wifi network at restart for configured APs',\n            }, {\n                name: 'use_wifi_rescan',\n                description: 'Scan wifi network every 44 minutes for configured APs',\n            }, {\n                name: 'receive_raw',\n                description: 'Add IR Raw data to JSON message',\n            }, {\n                name: 'hass_tele_on_power',\n                description: 'Send tele/%topic%/STATE in addition to stat/%topic%/RESULT',\n            }, {\n                name: 'sleep_normal',\n                description: 'Enable normal sleep instead of dynamic sleep',\n            }, {\n                name: 'button_switch_force_local',\n                description: 'Force local operation when button/switch topic is set',\n            }, {\n                name: 'no_hold_retain',\n                description: 'Don\\'t use retain flag on HOLD messages',\n            }, {\n                name: 'no_power_feedback',\n                description: 'Don\\'t scan relay power state at restart',\n            }, {\n                name: 'use_underscore',\n                description: 'Enable \"_\" instead of \"=\" as sensor index separator',\n            }, {\n                name: 'fast_power_cycle_disable',\n                description: 'Disable fast power cycle detection for device reset',\n            }, {\n                name: 'tuya_serial_mqtt_publish',\n                description: 'Enable TuyaReceived messages over Mqtt',\n            }, {\n                name: 'buzzer_enable',\n                description: 'Enable buzzer when available',\n            }, {\n                name: 'pwm_multi_channels',\n                description: 'Enable multi-channels PWM instead of Color PWM',\n            }, {\n                name: 'ex_tuya_dimmer_min_limit',\n                description: '',\n            }, {\n                name: 'energy_weekend',\n                description: '',\n            }, {\n                name: 'dds2382_model',\n                description: 'Select different Modbus registers for Active Energy',\n            }, {\n                name: 'hardware_energy_total',\n                description: 'Enable / Disable hardware energy total counter as reference',\n            }, {\n                name: 'cors_enabled',\n                description: 'Enable HTTP CORS',\n            }, {\n                name: 'ds18x20_internal_pullup',\n                description: 'Enable internal pullip for single DS18x20 sensor',\n            }, {\n                name: 'grouptopic_mode',\n                description: 'GroupTopic replaces %topic% (0) or fixed topic cmnd/grouptopic(1)',\n            }, {\n                name: 'spare26',\n                description: '',\n            }, {\n                name: 'spare27',\n                description: '',\n            }, {\n                name: 'spare28',\n                description: '',\n            }, {\n                name: 'spare29',\n                description: '',\n            }, {\n                name: 'shutter_mode',\n                description: 'Enable shutter support',\n            }, {\n                name: 'pcf8574_ports_inverted',\n                description: 'Invert all ports on PCF8574 devices',\n            }\n        ]\n    }, {\n        structName: \"SysBitfield4\",\n        setOptionStart: 82,\n        bitSize: 1,\n        items: [\n            {\n                name: 'spare00',\n                description: '',\n            }, {\n                name: 'spare01',\n                description: '',\n            }, {\n                name: 'spare02',\n                description: '',\n            }, {\n                name: 'spare03',\n                description: '',\n            }, {\n                name: 'spare04',\n                description: '',\n            }, {\n                name: 'spare05',\n                description: '',\n            }, {\n                name: 'spare06',\n                description: '',\n            }, {\n                name: 'spare07',\n                description: '',\n            }, {\n                name: 'spare08',\n                description: '',\n            }, {\n                name: 'spare09',\n                description: '',\n            }, {\n                name: 'spare10',\n                description: '',\n            }, {\n                name: 'spare11',\n                description: '',\n            }, {\n                name: 'spare12',\n                description: '',\n            }, {\n                name: 'spare13',\n                description: '',\n            }, {\n                name: 'spare14',\n                description: '',\n            }, {\n                name: 'spare15',\n                description: '',\n            }, {\n                name: 'spare16',\n                description: '',\n            }, {\n                name: 'spare17',\n                description: '',\n            }, {\n                name: 'spare18',\n                description: '',\n            }, {\n                name: 'spare19',\n                description: '',\n            }, {\n                name: 'spare20',\n                description: '',\n            }, {\n                name: 'spare21',\n                description: '',\n            }, {\n                name: 'spare22',\n                description: '',\n            }, {\n                name: 'spare23',\n                description: '',\n            }, {\n                name: 'spare24',\n                description: '',\n            }, {\n                name: 'spare25',\n                description: '',\n            }, {\n                name: 'spare26',\n                description: '',\n            }, {\n                name: 'spare27',\n                description: '',\n            }, {\n                name: 'spare28',\n                description: '',\n            }, {\n                name: 'spare29',\n                description: '',\n            }, {\n                name: 'spare30',\n                description: '',\n            }, {\n                name: 'spare31',\n                description: '',\n            }\n        ]\n    }],\n    settingsGroups: [{\n        groupName: \"Mqtt Settings\",\n        settings: [{\n            name: 'Mqtt Host',\n            command: 'MqttHost',\n        }, {\n            name: 'Mqtt User',\n            command: 'MqttUser',\n        }, {\n            name: 'Mqtt Password',\n            command: 'MqttPassword',\n        }]\n    }, {\n        groupName: \"Wifi Settings\",\n        settings: [{\n            name: 'Ssid 1',\n            command: 'Ssid1',\n        }, {\n            name: 'Password 1',\n            command: 'Password1',\n        }, {\n            name: 'Ssid 2',\n            command: 'Ssid2',\n        }, {\n            name: 'Password 2',\n            command: 'Password2',\n        }, {\n            name: 'Hostname',\n            command: 'Hostname',\n        }]\n        // } ,{\n        //     groupName: 'Rules',\n        //     settings: [{\n        //         name: 'Rule 1',\n        //         command: 'Rule1',\n        //     },{\n        //         name: 'Rule 2',\n        //         command: 'Rule2'\n        //     },{\n        //         name: 'Rule 3',\n        //         command: 'Rule3'\n        //     }]\n    }],\n    moduleResponseParser: function (moduleResponse) {\n        if (typeof moduleResponse.Module === 'object') {\n            return moduleResponse\n        } else {\n            let moduleParts = moduleResponse.Module.split(' ')\n            let parsed = { Module: {}}\n            parsed.Module[moduleParts[0]] = moduleParts[1].replace('(', '').replace(')', '')\n            return parsed\n        }\n    },\n    gpioResponseFormatter: function (gpioResponse) {\n        return Object.keys(gpioResponse).map((gpio, index) => {\n            if (typeof gpioResponse[gpio] === 'object') {\n                var key = Object.keys(gpioResponse[gpio])[0]\n                return { gpio: gpio, gpioDeviceType: key, gpioDeviceName: gpioResponse[gpio][key] }\n            } else {\n                return { gpio: gpio, gpioInfo: gpioResponse[gpio] }\n            }\n        })\n    },\n    commands: Commands,\n    configuration: {\n        Button: {\n            ButtonDebounce: Commands.Control.ButtonDebounce,\n            ButtonRetain: Commands.MQTT.ButtonRetain,\n            SetOption11: Commands.SetOptions.SetOption11,\n            SetOption13: Commands.SetOptions.SetOption13,\n            SetOption32: Commands.SetOptions.SetOption32,\n            SetOption40: Commands.SetOptions.SetOption40,\n            SetOption61: Commands.SetOptions.SetOption61,\n        },\n        Switch: {\n            SwitchDebounce: Commands.Control.ButtonDebounce,\n            SwitchRetain: Commands.MQTT.ButtonRetain,\n            'SwitchMode<x>': Commands.Control['SwitchMode<x>'],\n            SetOption32: Commands.SetOptions.SetOption32,\n        },\n        Relay: {\n            BlinkCount: Commands.Control.BlinkCount,\n            BlinkTime: Commands.Control.BlinkTime,\n            PowerOnState: Commands.Control.PowerOnState,\n            PowerRetain: Commands.MQTT.PowerRetain,\n            Interlock: Commands.Control.Interlock,\n            'PulseTime<x>': Commands.Control['PulseTime<x>'],\n            SetOption0: Commands.SetOptions.SetOption0,\n            SetOption26: Commands.SetOptions.SetOption26,\n            SetOption63: Commands.SetOptions.SetOption63,\n        }\n    }\n\n}\n\nexport default TasmotaConfig_06070000","import TasmotaConfig_06070000 from './TasmotaConfig-6.7.0.0'\n\nfunction updatedConfig() {\n\n    let TasmotaConfig_07010200 = {\n        settingsGroups: TasmotaConfig_06070000.settingsGroups,\n        moduleResponseParser: TasmotaConfig_06070000.moduleResponseParser,\n        gpioResponseFormatter: TasmotaConfig_06070000.gpioResponseFormatter,\n        commands: {},\n        configuration: TasmotaConfig_06070000.configuration,\n    }\n\n    TasmotaConfig_07010200.setOptionsStatusMaps =\n        [{\n            structName: \"SysBitfield\",\n            setOptionStart: 0,\n            bitSize: 1,\n            items: [\n                {\n                    name: 'save_state',\n                    description: 'Save power state and use after restart',\n                }, {\n                    name: 'button_restrict',\n                    description: 'Control button multipress',\n                }, {\n                    name: 'ex_value_units',\n                    description: 'Add units to JSON messages',\n                }, {\n                    name: 'mqtt_enabled',\n                    description: 'Control MQTT',\n                }, {\n                    name: 'mqtt_response',\n                    description: 'Switch between MQTT Result or Command',\n                }, {\n                    name: 'mqtt_power_retain',\n                    description: '',\n                }, {\n                    name: 'mqtt_button_retain',\n                    description: '',\n                }, {\n                    name: 'mqtt_switch_retain',\n                    description: '',\n                }, {\n                    name: 'temperature_conversion',\n                    description: 'Switch between Celsius or Fahreheit',\n                }, {\n                    name: 'mqtt_sensor_retain',\n                    description: 'CMDN_SENSORRETAIN',\n                }, {\n                    name: 'mqtt_offline',\n                    description: 'Control MQTT LWT message format',\n                }, {\n                    name: 'button_swap',\n                    description: 'Swap button single and double press functionality',\n                }, {\n                    name: 'stop_flash_rotate',\n                    description: 'Switch between dynamic or fixed slot flash save location',\n                }, {\n                    name: 'button_single',\n                    description: 'Support only single press to speed up button press recognition',\n                }, {\n                    name: 'interlock',\n                    description: '',\n                }, {\n                    name: 'pwm_control',\n                    description: 'Switch between commands PWM or COLOR/DIMMER/CT/CHANNEL',\n                }, {\n                    name: 'ws_clock_reverse',\n                    description: 'Set addressable LED Clock scheme parameter',\n                }, {\n                    name: 'decimal_text',\n                    description: 'Switch between decimal or hexadecimal output',\n                }, {\n                    name: 'light_signal',\n                    description: 'Pair light signal with CO2 sensor',\n                }, {\n                    name: 'hass_discovery',\n                    description: 'Control Home Assistant Automatic discovery',\n                }, {\n                    name: 'not_power_linked',\n                    description: 'Control power in relation fo Dimmer/Color/CT changes',\n                }, {\n                    name: 'no_power_on_check',\n                    description: 'Show voltage even if powered off',\n                }, {\n                    name: 'mqtt_serial',\n                    description: '',\n                }, {\n                    name: 'mqtt_serial_raw',\n                    description: '',\n                }, {\n                    name: 'pressure_conversion',\n                    description: 'Switch between hPa or mmHg pressure unit',\n                }, {\n                    name: 'knx_enabled',\n                    description: '',\n                }, {\n                    name: 'device_index_enable',\n                    description: 'Switch between POWER or POWER1',\n                }, {\n                    name: 'knx_enable_enhancement',\n                    description: '',\n                }, {\n                    name: 'rf_receive_decimal',\n                    description: 'RF Receive data format',\n                }, {\n                    name: 'ir_receive_decimal',\n                    description: 'IR Receive data format',\n                }, {\n                    name: 'hass_light',\n                    description: 'Enforce HASS Autodiscovery as light',\n                }, {\n                    name: 'global_state',\n                    description: 'Control link led blinking',\n                }\n            ]\n        }, {\n            structName: \"SysBitfield2\",\n            setOptionStart: 32,\n            bitSize: 1,\n            items: [],\n        }, {\n            structName: \"SysBitfield3\",\n            setOptionStart: 50,\n            bitSize: 1,\n            items: [\n                {\n                    name: 'timers_enable',\n                    description: '',\n                }, {\n                    name: 'user_esp8285_enable',\n                    description: 'Enable ESP8285 User GPIOs',\n                }, {\n                    name: 'time_append_timezone',\n                    description: 'Append timezone to JSON time',\n                }, {\n                    name: 'gui_hostname_ip',\n                    description: 'Show hostname and IP address in GUI main menu',\n                }, {\n                    name: 'tuya_apply_o20',\n                    description: 'Apple SetOption20 settings to Tuya device',\n                }, {\n                    name: 'mdns_enabled',\n                    description: 'Control mDNS Service',\n                }, {\n                    name: 'use_wifi_scan',\n                    description: 'Scan wifi network at restart for configured APs',\n                }, {\n                    name: 'use_wifi_rescan',\n                    description: 'Scan wifi network every 44 minutes for configured APs',\n                }, {\n                    name: 'receive_raw',\n                    description: 'Add IR Raw data to JSON message',\n                }, {\n                    name: 'hass_tele_on_power',\n                    description: 'Send tele/%topic%/STATE in addition to stat/%topic%/RESULT',\n                }, {\n                    name: 'sleep_normal',\n                    description: 'Enable normal sleep instead of dynamic sleep',\n                }, {\n                    name: 'button_switch_force_local',\n                    description: 'Force local operation when button/switch topic is set',\n                }, {\n                    name: 'no_hold_retain',\n                    description: 'Don\\'t use retain flag on HOLD messages',\n                }, {\n                    name: 'no_power_feedback',\n                    description: 'Don\\'t scan relay power state at restart',\n                }, {\n                    name: 'use_underscore',\n                    description: 'Enable \"_\" instead of \"=\" as sensor index separator',\n                }, {\n                    name: 'fast_power_cycle_disable',\n                    description: 'Disable fast power cycle detection for device reset',\n                }, {\n                    name: 'tuya_serial_mqtt_publish',\n                    description: 'Enable TuyaReceived messages over Mqtt',\n                }, {\n                    name: 'buzzer_enable',\n                    description: 'Enable buzzer when available',\n                }, {\n                    name: 'pwm_multi_channels',\n                    description: 'Enable multi-channels PWM instead of Color PWM',\n                }, {\n                    name: 'ex_tuya_dimmer_min_limit',\n                    description: '',\n                }, {\n                    name: 'energy_weekend',\n                    description: '',\n                }, {\n                    name: 'dds2382_model',\n                    description: 'Select different Modbus registers for Active Energy',\n                }, {\n                    name: 'hardware_energy_total',\n                    description: 'Enable / Disable hardware energy total counter as reference',\n                }, {\n                    name: 'cors_enabled',\n                    description: 'Enable HTTP CORS',\n                }, {\n                    name: 'ds18x20_internal_pullup',\n                    description: 'Enable internal pullip for single DS18x20 sensor',\n                }, {\n                    name: 'grouptopic_mode',\n                    description: 'GroupTopic replaces %topic% (0) or fixed topic cmnd/grouptopic(1)',\n                }, {\n                    name: 'bootcount_update',\n                    description: 'Enable incrementing bootcount when deepsleep is enabled',\n                }, {\n                    name: 'slider_dimmer_stay_on',\n                    description: 'Do not power off if slider moved to far left',\n                }, {\n                    name: 'spare28',\n                    description: '',\n                }, {\n                    name: 'spare29',\n                    description: '',\n                }, {\n                    name: 'shutter_mode',\n                    description: 'Enable shutter support',\n                }, {\n                    name: 'pcf8574_ports_inverted',\n                    description: 'Invert all ports on PCF8574 devices',\n                }\n            ]\n        }, {\n            structName: \"SysBitfield4\",\n            setOptionStart: 82,\n            bitSize: 1,\n            items: [\n                {\n                    name: 'spare00',\n                    description: '',\n                }, {\n                    name: 'spare01',\n                    description: '',\n                }, {\n                    name: 'spare02',\n                    description: '',\n                }, {\n                    name: 'spare03',\n                    description: '',\n                }, {\n                    name: 'spare04',\n                    description: '',\n                }, {\n                    name: 'spare05',\n                    description: '',\n                }, {\n                    name: 'spare06',\n                    description: '',\n                }, {\n                    name: 'spare07',\n                    description: '',\n                }, {\n                    name: 'spare08',\n                    description: '',\n                }, {\n                    name: 'spare09',\n                    description: '',\n                }, {\n                    name: 'spare10',\n                    description: '',\n                }, {\n                    name: 'spare11',\n                    description: '',\n                }, {\n                    name: 'spare12',\n                    description: '',\n                }, {\n                    name: 'spare13',\n                    description: '',\n                }, {\n                    name: 'spare14',\n                    description: '',\n                }, {\n                    name: 'spare15',\n                    description: '',\n                }, {\n                    name: 'spare16',\n                    description: '',\n                }, {\n                    name: 'spare17',\n                    description: '',\n                }, {\n                    name: 'spare18',\n                    description: '',\n                }, {\n                    name: 'spare19',\n                    description: '',\n                }, {\n                    name: 'spare20',\n                    description: '',\n                }, {\n                    name: 'spare21',\n                    description: '',\n                }, {\n                    name: 'spare22',\n                    description: '',\n                }, {\n                    name: 'spare23',\n                    description: '',\n                }, {\n                    name: 'spare24',\n                    description: '',\n                }, {\n                    name: 'spare25',\n                    description: '',\n                }, {\n                    name: 'spare26',\n                    description: '',\n                }, {\n                    name: 'spare27',\n                    description: '',\n                }, {\n                    name: 'spare28',\n                    description: '',\n                }, {\n                    name: 'spare29',\n                    description: '',\n                }, {\n                    name: 'spare30',\n                    description: '',\n                }, {\n                    name: 'spare31',\n                    description: '',\n                }\n            ]\n        }]\n\n\n    for(let commandType in TasmotaConfig_06070000.commands) {\n        TasmotaConfig_07010200.commands[commandType] = {}\n        for(let command in TasmotaConfig_06070000.commands[commandType]) {\n            TasmotaConfig_07010200.commands[commandType][command] = TasmotaConfig_06070000.commands[commandType][command]\n        }\n    }\n\n    TasmotaConfig_07010200.commands.SetOptions.SetOption77 = {\n        \"indexed\": false,\n        \"indexRange\": \"\",  \n        \"options\": [\n            {\n                \"display\": \"0\",\n                \"description\": \"disabled (default) \",\n                \"type\": \"select\"\n            },\n            {\n                \"display\": \"1\",\n                \"description\": \"enabled \",\n                \"type\": \"select\"\n            }\n        ],\n        \"description\": \"Do not power off if a slider is moved to far left\"\n    }\n\n\n    TasmotaConfig_07010200.commands.WiFi.CORS = {\n        \"indexed\": false,\n        \"indexRange\": \"\",  \n        \"options\": [\n            {\n                \"display\": \"\",\n                \"description\": \"disabled (default) \",\n                \"type\": \"select\"\n            },\n            {\n                \"display\": \"*\",\n                \"description\": \"enable CORS for all hosts\",\n                \"type\": \"select\"\n            },\n            {\n                \"display\": \"value\",\n                \"description\": \"Set CORS to specific host like http://tasui.shantur.com\",\n                \"type\": \"input\"\n            }\n        ],\n        \"description\": \"Enable/Disable Cross Origin Resource Sharing for a domain\"\n    }\n\n\n\n    return TasmotaConfig_07010200\n}\n\nexport let TasmotaConfig_07010200 = updatedConfig()","/*\n\n  Copyright (C) 2019  Shantur Rathore\n  \n  This program is free software: you can redistribute it and/or modify\n  it under the terms of the GNU General Public License as published by\n  the Free Software Foundation, either version 3 of the License, or\n  (at your option) any later version.\n  This program is distributed in the hope that it will be useful,\n  but WITHOUT ANY WARRANTY; without even the implied warranty of\n  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n  GNU General Public License for more details.\n  You should have received a copy of the GNU General Public License\n  along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\n*/\n\nimport TasmotaConfig_06070000 from './TasmotaConfig-6.7.0.0'\nimport { TasmotaConfig_07010200 } from './TasmotaConfig-7.1.2.0'\n\nconst TasmotaVersionedConfig = {\n    TasmotaConfig_06070000: TasmotaConfig_06070000,\n    TasmotaConfig_07010200: TasmotaConfig_07010200,\n}\n\nfunction getConfigurationForVersion(version) {\n    if (version <= 0x06070000) {\n        return TasmotaVersionedConfig.TasmotaConfig_06070000\n    } else {\n\n        let versions = Object.keys(TasmotaVersionedConfig)\n        let closestVersion = 0xFFFFFFFF\n        let maximumVersion = -1\n\n        for (let i = 0; i < versions.length; i++) {\n            let availableVersion = parseInt(versions[i].replace('TasmotaConfig_', ''), 16)\n\n            if (availableVersion > maximumVersion) {\n                maximumVersion = availableVersion\n            }\n\n            if (availableVersion === version) {\n                closestVersion = availableVersion;\n                break\n            } else if (availableVersion > version) {\n                if (closestVersion > availableVersion) {\n                    closestVersion = availableVersion;\n                }\n            }\n        }\n\n        if (closestVersion === 0xFFFFFFFF) {\n            closestVersion = maximumVersion\n        }\n\n\n        return TasmotaVersionedConfig['TasmotaConfig_' + ('0000000' + closestVersion.toString(16).toUpperCase()).substr(-8)]\n    }\n}\n\nexport default getConfigurationForVersion","/*\n\n  Copyright (C) 2019  Shantur Rathore\n  \n  This program is free software: you can redistribute it and/or modify\n  it under the terms of the GNU General Public License as published by\n  the Free Software Foundation, either version 3 of the License, or\n  (at your option) any later version.\n  This program is distributed in the hope that it will be useful,\n  but WITHOUT ANY WARRANTY; without even the implied warranty of\n  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n  GNU General Public License for more details.\n  You should have received a copy of the GNU General Public License\n  along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\n*/\n\nimport TasmotaDeviceConnector from '../DeviceTypes/TasmotaDeviceConnector';\nimport getConfigurationForVersion from '../Configuration/TasmotaVersionedConfig'\n\nclass DeviceManager {\n\n    deviceConnectors = {};\n\n\n    constructor() {\n        this.devices = \"devices\" in localStorage ? JSON.parse(localStorage.getItem('devices')) : {};\n        this.discoveredDevices = {};\n        Object.keys(this.devices).forEach((key) => {\n            if (!this.devices[key].status0Response) {\n                let oldInfo = Object.assign({}, this.devices[key])\n                this.devices[key] = { status0Response: oldInfo }\n            }\n        })\n\n        this.saveDevices()\n    }\n\n    getTasmotaConfig(macAddress) {\n        let deviceInfo = this.getDevice(macAddress)\n\n        let versionStr = deviceInfo.status0Response.StatusFWR.Version\n        versionStr = versionStr.substring(0, versionStr.indexOf('('))\n\n        let versionNumbers = versionStr.split('.')\n\n        let version = (parseInt(versionNumbers[0]) << 24) + (parseInt(versionNumbers[1]) << 16) + (parseInt(versionNumbers[2]) << 8) + (parseInt(versionNumbers[3]))\n\n        return getConfigurationForVersion(version)\n    }\n\n    addDevice(macAddress, deviceInfo) {\n        if (macAddress.length > 0) {\n            this.devices[macAddress] = deviceInfo\n            // if (this.discoveredDevices[macAddress]) {\n            //     delete this.discoveredDevices[macAddress]\n            // }\n            this.saveDevices()\n            return true;\n        }\n        return false;\n    }\n\n    saveDevices() {\n        localStorage.setItem('devices', JSON.stringify(this.devices));\n    }\n\n    addDiscoveredDevice(macAddress, status0Response) {\n        if (macAddress.length > 0) {\n            if (this.discoveredDevices[macAddress]) {\n                this.discoveredDevices[macAddress].status0Response = status0Response\n            } else {\n                this.discoveredDevices[macAddress] = {\n                    status0Response: status0Response,\n                }\n            }\n            if (this.devices[macAddress]) {\n                this.devices[macAddress].status0Response = status0Response\n                this.updateDeviceConnector(macAddress, status0Response.StatusNET.IPAddress)\n            }\n            return true\n        }\n        return false\n    }\n\n    clearDiscoveredDevices() {\n        for (let deviceMac in Object.keys(this.discoveredDevices)) {\n            if (this.deviceConnectors[deviceMac]) {\n                this.deviceConnectors[deviceMac].disconnect();\n                delete this.deviceConnectors[deviceMac]\n            }\n        }\n        this.discoveredDevices = {};\n    }\n\n    updateDeviceConnector(macAddress, ipAddress) {\n        if (this.deviceConnectors[macAddress]) {\n            this.deviceConnectors[macAddress].updateIpAddress(ipAddress)\n        }\n    }\n\n    updateDevice(macAddress, updatedInfo) {\n        if (this.devices[macAddress]) {\n            this.devices[macAddress] = { ...this.devices[macAddress], ...updatedInfo }\n            this.saveDevices()\n            this.updateDeviceConnector(macAddress, this.devices[macAddress].status0Response.StatusNET.IPAddress)\n        } else if (this.discoveredDevices[macAddress]) {\n            this.discoveredDevices[macAddress] = { ...this.discoveredDevices[macAddress], ...updatedInfo }\n            this.updateDeviceConnector(macAddress, this.discoveredDevices[macAddress].status0Response.StatusNET.IPAddress)\n        }\n    }\n\n    removeDevice(macAddress) {\n        if (this.devices[macAddress]) {\n            if (this.deviceConnectors[macAddress]) {\n                this.deviceConnectors[macAddress].disconnectAll()\n            }\n            delete this.devices[macAddress]\n            localStorage.setItem('devices', JSON.stringify(this.devices));\n        }\n    }\n\n    getDevice(macAddress) {\n        if (this.devices[macAddress]) {\n            return this.devices[macAddress];\n        } else if (this.discoveredDevices[macAddress]) {\n            return this.discoveredDevices[macAddress]\n        } else {\n            return null\n        }\n    }\n\n    getDevices() {\n        return this.devices;\n    }\n\n    getDiscoveredDevices() {\n        return this.discoveredDevices;\n    }\n\n    isDeviceKnown(macAddress) {\n        return this.devices[macAddress] != null;\n    }\n\n    getDeviceConnector(macAddress, ipAddress) {\n        if (this.deviceConnectors[macAddress]) {\n            return this.deviceConnectors[macAddress];\n        } else {\n            let deviceConnector = new TasmotaDeviceConnector(ipAddress, this.getDevice(macAddress).authInfo);\n            this.deviceConnectors[macAddress] = deviceConnector;\n            return deviceConnector;\n        }\n    }\n}\n\nexport default DeviceManager;","/*\n\n  Copyright (C) 2019  Shantur Rathore\n  \n  This program is free software: you can redistribute it and/or modify\n  it under the terms of the GNU General Public License as published by\n  the Free Software Foundation, either version 3 of the License, or\n  (at your option) any later version.\n  This program is distributed in the hope that it will be useful,\n  but WITHOUT ANY WARRANTY; without even the implied warranty of\n  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n  GNU General Public License for more details.\n  You should have received a copy of the GNU General Public License\n  along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\n*/\n\nimport React from 'react'\nimport { Component } from \"react\";\nimport { Typography, Box } from \"@material-ui/core\";\nimport TasmotaDevice from '../DeviceTypes/TasmotaDevice';\nimport { withStyles, ThemeProvider, createMuiTheme } from '@material-ui/core/styles';\n\nclass DeviceDetails extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            macAddress: \"\",\n        }\n    }\n\n    componentDidMount() {\n        window.gtag('event', 'DeviceDetails');\n        window.gtag('event', 'screen_view', { 'screen_name': 'DeviceDetails'});\n        this.setState({\n            macAddress: this.props.match.params.mac\n        })\n\n    }\n\n    render() {\n        if (this.state.macAddress !== \"\") {\n            return (\n                <Box style={{ overflow: \"visible\", position: \"absolute\" }}>\n                    <TasmotaDevice macAddress={this.state.macAddress} renderType=\"Details\" deviceManager={this.props.deviceManager} />\n                </Box>\n            );\n        } else {\n            return null;\n        }\n    }\n}\n\nexport default DeviceDetails","/*\n\n  Copyright (C) 2019  Shantur Rathore\n  \n  This program is free software: you can redistribute it and/or modify\n  it under the terms of the GNU General Public License as published by\n  the Free Software Foundation, either version 3 of the License, or\n  (at your option) any later version.\n  This program is distributed in the hope that it will be useful,\n  but WITHOUT ANY WARRANTY; without even the implied warranty of\n  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n  GNU General Public License for more details.\n  You should have received a copy of the GNU General Public License\n  along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\n*/\n\nimport React from 'react'\nimport { Component } from \"react\";\nimport { Typography, Box } from \"@material-ui/core\";\nimport TasmotaDevice from '../DeviceTypes/TasmotaDevice';\n\nclass DeviceDetails extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            macAddress: \"\",\n        }\n    }\n\n    componentDidMount() {\n        window.gtag('event', 'DeviceSettings');\n        window.gtag('event', 'screen_view', { 'screen_name': 'DeviceSettings'});\n        this.setState({\n            macAddress: this.props.match.params.mac\n        })\n\n    }\n\n    render() {\n        if (this.state.macAddress !== \"\") {\n            return (\n                <Box style={{ overflow: \"visible\", position: \"absolute\" }}>\n                    <TasmotaDevice macAddress={this.state.macAddress} renderType=\"Settings\" deviceManager={this.props.deviceManager} />\n                </Box>\n            );\n        } else {\n            return null;\n        }\n    }\n}\n\nexport default DeviceDetails;","/*\n\n  Copyright (C) 2019  Shantur Rathore\n  \n  This program is free software: you can redistribute it and/or modify\n  it under the terms of the GNU General Public License as published by\n  the Free Software Foundation, either version 3 of the License, or\n  (at your option) any later version.\n  This program is distributed in the hope that it will be useful,\n  but WITHOUT ANY WARRANTY; without even the implied warranty of\n  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n  GNU General Public License for more details.\n  You should have received a copy of the GNU General Public License\n  along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\n*/\n\nimport { Checkbox, FormControlLabel, Typography } from '@material-ui/core';\nimport Box from \"@material-ui/core/Box\";\nimport Button from \"@material-ui/core/Button\";\nimport LinearProgress from \"@material-ui/core/LinearProgress\";\nimport TextField from \"@material-ui/core/TextField\";\nimport AddIcon from '@material-ui/icons/Add';\nimport CallToActionIcon from '@material-ui/icons/CallToAction';\nimport DeleteIcon from '@material-ui/icons/Delete';\nimport InfoIcon from '@material-ui/icons/Info';\nimport OpenInBrowserIcon from '@material-ui/icons/OpenInBrowser';\nimport SettingsApplicationsIcon from '@material-ui/icons/SettingsApplications';\nimport IPAddress from 'ip-address';\nimport { withSnackbar } from 'notistack';\nimport React from 'react';\nimport superagent from \"superagent\";\nimport DeviceList from '../Components/DeviceList';\nimport DisplayTypeButtons from '../Components/DisplayModeButtons';\n\n\n\nclass FindDevices extends React.Component {\n\n    ipsToScan = [];\n    ipsRequested = [];\n\n    constructor(props) {\n        super(props)\n        this.state = {\n            ipFrom: this.props.appConfig.getAppConfig('ip_scan_from') || \"192.168.10.1\",\n            ipTo: this.props.appConfig.getAppConfig('ip_scan_to') || \"192.168.10.254\",\n            totalAddresses: \"\",\n            numIpsRequested: 0,\n            numIpsCompleted: 0,\n            searching: false,\n            displayMode: \"Table_Status\",\n            username: '',\n            password: '',\n            enableAuth: false,\n            enableCorsAutomatically: !window.runtimeConfig.proxyMode,\n\n        }\n\n    }\n\n    componentDidMount() {\n        window.gtag('event', 'screen_view', { 'screen_name': 'DiscoverDevices'});\n        window.gtag('event', 'DiscoverDevices');\n    }\n\n    componentWillMount() {\n        this.calculateTotalIPs(this.state.ipFrom, this.state.ipTo);\n    }\n\n    componentWillUnmount() {\n        // this.props.deviceManager.clearDiscoveredDevices();\n    }\n\n    handleIPFromChange = event => {\n        this.setState({\n            ipFrom: event.target.value,\n        });\n        let nets = event.target.value.split('.')\n        let to = this.state.ipTo\n        if (nets.length === 4) {\n            to = `${nets[0]}.${nets[1]}.${nets[2]}.254`\n            this.setState({\n                ipTo: to\n            })\n        }\n        this.calculateTotalIPs(event.target.value, to);\n    }\n\n    handleIPToChange = event => {\n        this.setState({\n            ipTo: event.target.value,\n        });\n        this.calculateTotalIPs(this.state.ipFrom, event.target.value);\n    }\n\n    calculateTotalIPs(ipFrom, ipTo) {\n\n        console.log('Calculate IPs From %s : To %s ', ipFrom, ipTo);\n\n        if (ipFrom.split('.').length === 4 && ipTo.split('.').length === 4) {\n\n            let from = new IPAddress.Address4(ipFrom);\n            let to = new IPAddress.Address4(ipTo);\n\n            // console.log('From %O : To %O ', from.bigInteger().toString() , to.bigInteger().toString());\n\n            this.setState({\n                totalAddresses: (to.bigInteger() - from.bigInteger() + 1),\n            })\n\n            console.log('Total Addresses : ' + (to.bigInteger() - from.bigInteger() + 1));\n        }\n    }\n\n    onCommandResponse(args) {\n        console.log(`${args.ip} : Present : ${args.success} Response : %O`, args.response);\n        if (args.success && args.response.body.StatusNET) {\n            this.props.deviceManager.addDiscoveredDevice(args.response.body.StatusNET.Mac, args.response.body);\n            if (this.state.enableAuth) {\n                this.props.deviceManager.updateDevice(args.response.body.StatusNET.Mac,\n                    {\n                        authInfo:\n                        {\n                            username: this.state.username,\n                            password: this.state.password,\n                        }\n                    })\n            }\n            this.setState({})\n            // }\n        } else {\n            if (args.success && args.response.body.WARNING) {\n                if (this.state.enableAuth) {\n                    this.props.enqueueSnackbar(`${args.ip} authentication failed`, { variant: 'error'})\n                } else {\n                    this.props.enqueueSnackbar(`${args.ip} needs authentication`, { variant: 'error'})\n                }\n            }\n        }\n        this.ipsRequested = this.ipsRequested.filter(item => item !== args.ip);\n        this.scanIps()\n    }\n\n    scanIps() {\n        if (this.ipsToScan.length) {\n\n            while (this.ipsRequested.length < 100 && this.ipsToScan.length) {\n                let ip = this.ipsToScan.shift()\n                this.ipsRequested.push(ip);\n                if (this.state.enableCorsAutomatically && !window.runtimeConfig.proxyMode) {\n                    this.enableCorsAndSendRequest(ip)\n                } else {\n                    this.sendRequest(ip)\n                }\n            }\n\n            this.setState({\n                numIpsCompleted: (this.state.totalAddresses - this.ipsToScan.length) * 100 / this.state.totalAddresses,\n                numIpsRequested: (this.state.totalAddresses - this.ipsToScan.length + this.ipsRequested.length) * 100 / this.state.totalAddresses\n            })\n        } else {\n            if (this.ipsRequested.length === 0) {\n                this.setState({\n                    searching: false,\n                })\n            }\n        }\n    }\n\n    enableCorsAndSendRequest(ip) {\n        let cmnd = `CORS ${window.location.protocol}//${window.location.hostname}`\n\n        if (window.location.port && window.location.port !== \"\") {\n            cmnd += `:${window.location.port}`\n        }\n\n        let url = 'http://' + ip + '/cm?cmnd=' + encodeURIComponent(cmnd).replace(\";\", \"%3B\");\n\n        console.log(\"Enabling CORS for with \" + url)\n\n        superagent.get(url)\n            .timeout({\n                response: 5000,  // Wait 5 seconds for the server to start sending,\n                deadline: 6000, // but allow 6 seconds for the file to finish loading.\n            }).end(function (err, res) {\n                setTimeout(this.obj.sendRequest.bind(this.obj, this.ip), 1000);\n            }.bind({obj: this, ip: ip}));\n    }\n\n    sendRequest(ip) {\n        var callback = function (err, response) {\n            this.onCommandResponse({ key: this.cmnd, response: response, error: err, ip: this.ip, url: this.url, success: err ? false : true });\n        }\n\n        let cmnd = \"Status 0\"\n        // let ip = IPAddress.Address4.fromBigInteger(ipNum).correctForm();\n        let url = 'http://' + ip + '/cm?cmnd=' + encodeURIComponent(cmnd);\n\n        if (this.state.enableAuth) {\n            url += `&user=${encodeURIComponent(this.state.username)}&password=${encodeURIComponent(this.state.password)}`\n        }\n\n        if (window.runtimeConfig.proxyMode) {\n            url = '?url=' + encodeURIComponent(url)\n        }\n\n        superagent.get(url)\n            .timeout({\n                response: 5000,  // Wait 5 seconds for the server to start sending,\n                deadline: 60000, // but allow 1 minute for the file to finish loading.\n            })\n            .end(callback.bind({ onCommandResponse: this.onCommandResponse.bind(this), ip: ip, url: url, cmnd: cmnd, success: true }))\n\n    }\n\n    handleFindClicked() {\n\n        window.gtag('event', 'StartDiscovery');\n\n        let from = new IPAddress.Address4(this.state.ipFrom).bigInteger();\n        let to = new IPAddress.Address4(this.state.ipTo).bigInteger();\n\n        this.props.appConfig.putAppConfig('ip_scan_from', this.state.ipFrom)\n        this.props.appConfig.putAppConfig('ip_scan_to', this.state.ipTo)\n\n        for (let ipNum = from; ipNum <= to; ipNum++) {\n            this.ipsToScan.push(IPAddress.Address4.fromBigInteger(ipNum).correctForm());\n        }\n        this.setState({\n            searching: true,\n        })\n        this.scanIps();\n    }\n\n    handleStopClicked() {\n        window.gtag('event', 'StopDiscovery');\n        this.ipsToScan = [];\n        this.scanIps();\n    }\n\n    openDeviceDetails = (macAddress, event) => {\n        event.stopPropagation();\n        this.props.history.push('/details/' + macAddress);\n    }\n\n    addDevice = (macAddress, event) => {\n        window.gtag('event', 'AddDevice');\n        console.log('Add Device ' + macAddress)\n        event.stopPropagation();\n        this.props.deviceManager.addDevice(macAddress, this.props.deviceManager.getDiscoveredDevices()[macAddress]);\n        this.setState({})\n    }\n\n    deleteDevice = (macAddress, event) => {\n        window.gtag('event', 'DeleteDevice');\n        console.log('Delete Device ' + macAddress)\n        event.stopPropagation();\n        this.props.deviceManager.removeDevice(macAddress);\n        this.setState({})\n    }\n\n    openDeviceSettings = (macAddress, event) => {\n        event.stopPropagation();\n        this.props.history.push('/settings/' + macAddress);\n    }\n\n    openDeviceConsole = (macAddress, event) => {\n        event.stopPropagation();\n        this.props.history.push('/console/' + macAddress);\n    }\n\n    openWebUI  = (macAddress, event) => {\n        window.gtag('event', 'OpenWebUI');\n        event.stopPropagation();\n        let ip = this.props.deviceManager.getDevice(macAddress).status0Response.StatusNET.IPAddress\n        window.open(`http://${ip}`)\n    }\n\n    commonButtons = [{\n        toolTip: \"Details\",\n        label: \"details\",\n        icon: <InfoIcon />,\n        onButtonClick: (mac, event) => this.openDeviceDetails(mac, event),\n    }, {\n        toolTip: \"Settings\",\n        label: \"settings\",\n        icon: <SettingsApplicationsIcon />,\n        onButtonClick: (mac, event) => this.openDeviceSettings(mac, event),\n    }, {\n        toolTip: \"Console\",\n        label: \"console\",\n        icon: <CallToActionIcon />,\n        onButtonClick: (mac, event) => this.openDeviceConsole(mac, event),\n    }, {\n        toolTip: \"WebUI\",\n        label: \"webui\",\n        icon: <OpenInBrowserIcon />,\n        onButtonClick: (mac, event) => this.openWebUI(mac, event),\n    }]\n\n    knownDeviceButtons = [...this.commonButtons, {\n        toolTip: \"Delete\",\n        label: \"delete\",\n        icon: <DeleteIcon />,\n        onButtonClick: (mac, event) => this.deleteDevice(mac, event),\n    }]\n\n    newDeviceButtons = [...this.commonButtons, {\n        toolTip: \"Add\",\n        label: \"add\",\n        icon: <AddIcon />,\n        onButtonClick: (mac, event) => this.addDevice(mac, event),\n    }]\n\n    onAuthEnableChanged(event) {\n        event.stopPropagation()\n        this.setState({ enableAuth: event.target.checked })\n    }\n\n    onEnableCorsAutomaticallyChanged(event) {\n        event.stopPropagation()\n        this.setState({ enableCorsAutomatically: event.target.checked })\n    }\n\n    render() {\n\n        let discoveredDevices = this.props.deviceManager.getDiscoveredDevices()\n        let discoveredDevicesMacs = Object.keys(discoveredDevices)\n\n        let newDevices = discoveredDevicesMacs.filter((mac) => {\n            return !this.props.deviceManager.isDeviceKnown(mac)\n        }).reduce((obj, key) => {\n            obj[key] = discoveredDevices[key];\n            return obj;\n        }, {});\n\n\n        let knownDevices = discoveredDevicesMacs.filter((mac) => {\n            return this.props.deviceManager.isDeviceKnown(mac)\n        }).reduce((obj, key) => {\n            obj[key] = discoveredDevices[key];\n            return obj;\n        }, {});\n\n\n        return (\n            <Box display=\"flex\" flexGrow={1} flexDirection=\"column\" style={{ overflow: \"visible\", position: \"absolute\" }}>\n                <Box display=\"flex\" alignItems=\"center\" flexDirection=\"row\">\n                    <h1>Discover Active Devices</h1>\n                    <DisplayTypeButtons displayMode={this.state.displayMode} setState={(state) => this.setState(state)} />\n                </Box>\n                <Box display=\"flex\" alignItems=\"baseline\" flexDirection=\"row\">\n                    <TextField\n                        id=\"outlined-name\"\n                        label=\"Start IP Address\"\n                        placeholder=\"IP\"\n                        margin=\"normal\"\n                        variant=\"outlined\"\n                        value={this.state.ipFrom}\n                        disabled={this.state.searching ? 1 : 0}\n                        onChange={this.handleIPFromChange}\n                    />\n                    <TextField\n                        id=\"outlined-name\"\n                        label=\"End IP Address\"\n                        placeholder=\"IP\"\n                        margin=\"normal\"\n                        variant=\"outlined\"\n                        value={this.state.ipTo}\n                        disabled={this.state.searching ? 1 : 0}\n                        onChange={this.handleIPToChange}\n                    />\n                    {!this.state.searching ?\n                        <Button variant=\"contained\" margin=\"normal\" onClick={() => this.handleFindClicked()}>Start Discovery</Button>\n                        : <Button variant=\"contained\" margin=\"normal\" onClick={() => this.handleStopClicked()} >Stop Discovery</Button>\n                    }\n                </Box>\n                <Typography>\n                    IPs to scan : {this.state.totalAddresses}\n                </Typography>\n                { window.runtimeConfig.proxyMode ? \"\" : \n                    <Box display=\"flex\" alignItems=\"baseline\" flexDirection=\"row\">\n                        <FormControlLabel\n                            value=\"end\"\n                            control={<Checkbox\n                                disabled={this.state.searching ? 1 : 0}\n                                color=\"primary\"\n                                checked={this.state.enableCorsAutomatically}\n                                onChange={(event) => this.onEnableCorsAutomaticallyChanged(event)}\n                            />}\n                            label=\"Enable CORS for TasUI\"\n                            labelPlacement=\"end\"\n                        />\n                    </Box>\n                }\n                <Box display=\"flex\" alignItems=\"baseline\" flexDirection=\"row\">\n                    <FormControlLabel\n                        value=\"end\"\n                        control={<Checkbox\n                            disabled={this.state.searching ? 1 : 0}\n                            color=\"primary\"\n                            checked={this.state.enableAuth}\n                            onChange={(event) => this.onAuthEnableChanged(event)}\n                        />}\n                        label=\"Use Authentication\"\n                        labelPlacement=\"end\"\n                    />\n                    <TextField\n                        id=\"outlined-name\"\n                        label=\"Username\"\n                        placeholder=\"Username\"\n                        disabled={this.state.enableAuth && !this.state.searching ? 0 : 1}\n                        margin=\"normal\"\n                        variant=\"outlined\"\n                        value={this.state.username}\n                        onChange={(event) => this.setState({ username: event.target.value })}\n                    />\n                    <TextField\n                        id=\"outlined-name\"\n                        label=\"Password\"\n                        placeholder=\"Password\"\n                        type=\"password\"\n                        margin=\"normal\"\n                        variant=\"outlined\"\n                        disabled={this.state.enableAuth && !this.state.searching ? 0 : 1}\n                        value={this.state.password}\n                        onChange={(event) => this.setState({ password: event.target.value })}\n                    />\n                </Box>\n                {this.state.searching ?\n                    <LinearProgress variant=\"buffer\" value={this.state.numIpsCompleted} valueBuffer={this.state.numIpsRequested} />\n                    : null}\n\n\n                {/* <h3>New Devices</h3> */}\n                <DeviceList\n                    key=\"newDevices\"\n                    displayMode={this.state.displayMode}\n                    deviceSections={{\n                        \"New Devices\": { devices: newDevices, itemButtons: this.newDeviceButtons },\n                        \"Saved Devices\": { devices: knownDevices, itemButtons: this.knownDeviceButtons }\n                    }}\n                    deviceManager={this.props.deviceManager}\n                />\n\n            </Box>\n        )\n\n    }\n\n}\n\n\n\nexport default withSnackbar(FindDevices)\n","/*\n\n  Copyright (C) 2019  Shantur Rathore\n  \n  This program is free software: you can redistribute it and/or modify\n  it under the terms of the GNU General Public License as published by\n  the Free Software Foundation, either version 3 of the License, or\n  (at your option) any later version.\n  This program is distributed in the hope that it will be useful,\n  but WITHOUT ANY WARRANTY; without even the implied warranty of\n  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n  GNU General Public License for more details.\n  You should have received a copy of the GNU General Public License\n  along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\n*/\n\nimport React from 'react'\nimport { withStyles, ThemeProvider, createMuiTheme } from '@material-ui/core/styles';\nimport Terminal from 'react-console-emulator'\nimport { Box, Container, FormControlLabel, Checkbox } from '@material-ui/core'\nimport FormControl from '@material-ui/core/FormControl';\nimport Select from '@material-ui/core/Select';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport superagent from 'superagent';\nimport ActionButton from '../Components/ActionButton';\nimport HelpIcon from '@material-ui/icons/Help';\nimport ClearIcon from '@material-ui/icons/Clear';\n\nconst styles = theme => ({\n    terminal: {\n        flexGrow: 1,\n        flexBasis: \"0\",\n        flexShrink: 1,\n        height: \"80vh\",\n        overflow: \"hidden\",\n    },\n})\n\nclass Console extends React.Component {\n\n    commands = {}\n\n    constructor(props) {\n        super(props)\n        this.state = {\n            deviceName: '',\n            webLogEnabled: false,\n            weblogLevel: 2,\n        }\n        this.terminal = React.createRef()\n        this.deviceManager = this.props.deviceManager\n        this.commandFired = null\n    }\n\n    onCommandResponse(cmnd, success, response) {\n        console.log(`onCommandResponse ${cmnd} === ${this.commandFired}`)\n        if (cmnd === this.commandFired) {\n            this.commandFired = null\n            if (success) {\n                this.addLog(JSON.stringify(response))\n            } else {\n                this.addLog(`${cmnd} Failed`)\n            }\n        }\n\n        if (cmnd.toLowerCase().startsWith('weblog ') && success) {\n            if (response.WebLog) {\n                this.setState({ weblogLevel: response.WebLog })\n            } else {\n                this.setState({ weblogLevel: 1 })\n            }\n        }\n    }\n\n    sendConsoleCommand(cmnd) {\n        this.terminal.current.terminalInput.current.value = cmnd\n        this.terminal.current.processCommand()\n    }\n\n    addLog(line) {\n        let rootNode = this.terminal.current.terminalRoot.current;\n        let scrolledUp = rootNode.scrollTop < rootNode.scrollHeight - rootNode.clientHeight\n\n        this.terminal.current.pushToStdout(line)\n        if (!scrolledUp) {\n            this.terminal.current.scrollToBottom()\n        }\n    }\n\n    onWebLogLevelChanged(event) {\n        event.stopPropagation()\n        this.fireCommand('WebLog ' + event.target.value)\n    }\n\n    onWegLogEnableChanged(event) {\n        this.setState({ webLogEnabled: event.target.checked })\n        if (event.target.checked) {\n            this.startWebLog()\n        } else {\n            this.stopWebLog()\n        }\n    }\n\n    requestLog() {\n        var callback = function (err, response) {\n            // console.log (\"Error : %O Response : %O\", err, response);\n            if (response) {\n                this.nextCommanNumber = response.text.substring(0, response.text.indexOf('}'));\n                let index = response.text.indexOf(':');\n                if (index > 0) {\n                    let data = response.text.substring(index + 1)\n                    data = data.substring(0, data.lastIndexOf('}1'))\n                    let lines = data.split('\\n')\n                    for (let line of lines) {\n                        this.addLog(line)\n                    }\n                }\n            }\n        }\n        let url = 'http://' + this.deviceIPAddress + '/cs?c2=' + this.nextCommanNumber;\n\n        if (this.deviceInfo.authInfo) {\n            url += `&user=${encodeURI(this.deviceInfo.authInfo.username)}&password=${encodeURI(this.deviceInfo.authInfo.password)}`\n        }\n\n        superagent.get(url)\n            .timeout({\n                response: 1000,  // Wait 5 seconds for the server to start sending,\n                deadline: 3000, // but allow 1 minute for the file to finish loading.\n            })\n            .end(callback.bind(this))\n    }\n\n    fireCommand(command, args) {\n        this.commandFired = `${command} ${args}`\n        console.log(`FireCommand ${this.commandFired}`)\n        this.deviceConnector.performCommandOnDeviceDirect(this.commandFired)\n    }\n\n    generateCommands() {\n        for (let [commandCatagory, commands] of Object.entries(this.deviceConfig.commands)) {\n            for (let [commandName, command] of Object.entries(commands)) {\n                this.commands[commandName.toLowerCase()] = {\n                    description: ' ', //command.description,\n                    usage: `${commandName} ${command.options.length > 0 ? ` <value>` : ''}`,\n                    fn: (args) => this.fireCommand(commandName, args ? args : '')\n                }\n            }\n        }\n    }\n\n    componentWillMount() {\n        this.macAddress = this.props.match.params.mac\n        this.deviceInfo = this.deviceManager.getDevice(this.macAddress)\n        this.deviceIPAddress = this.deviceInfo.status0Response.StatusNET.IPAddress\n        this.deviceConfig = this.props.deviceManager.getTasmotaConfig(this.macAddress)\n        this.generateCommands()\n        if (!this.deviceConnector) {\n            this.deviceConnector = this.props.deviceManager.getDeviceConnector(this.macAddress, this.deviceInfo.status0Response.StatusNET.IPAddress);\n        }\n        this.deviceConnector.connect(this);\n        this.setState({ deviceName: this.deviceInfo.status0Response.Status.FriendlyName[0] })\n        this.nextCommanNumber = 0\n        if (this.state.webLogEnabled) {\n            this.startWebLog()\n        }\n    }\n\n    componentDidMount() {\n        window.gtag('event', 'Console');\n        window.gtag('event', 'screen_view', { 'screen_name': 'Console'});\n        this.fireCommand('Weblog')\n    }\n\n    startWebLog() {\n        this.stopWebLog()\n        this.timer = setInterval(this.requestLog.bind(this), 3000);\n        this.requestLog()\n    }\n\n    stopWebLog() {\n        if (this.timer) {\n            clearInterval(this.timer);\n            this.timer = null\n        }\n    }\n\n    componentWillUnmount() {\n        this.stopWebLog()\n        this.deviceConnector.disconnect(this);\n    }\n\n    toCamelCase(string) {\n        return string.replace(/^([A-Z])|\\s(\\w)/g, function (match, p1, p2, offset) {\n            if (p2) return p2.toUpperCase();\n            return p1.toLowerCase();\n        });\n    }\n\n    render() {\n        const { classes } = this.props\n\n        return (\n            <Box>\n                <Box flexGrow={1}>\n                    <FormControlLabel\n                        value=\"end\"\n                        control={<Checkbox\n                            color=\"primary\"\n                            checked={this.state.weblogEnabled}\n                            onChange={(event) => this.onWegLogEnableChanged(event)}\n                        />}\n                        label=\"Fetch Weblog\"\n                        labelPlacement=\"end\"\n                    />\n\n                    <ActionButton\n                        toolTip=\"Clear Console\"\n                        label=\"clear\"\n                        icon={<ClearIcon />}\n                        onButtonClick={() => this.terminal.current.clearStdout()}\n                    />\n\n                    <ActionButton\n                        toolTip=\"Show help\"\n                        label=\"help\"\n                        icon={<HelpIcon />}\n                        onButtonClick={() => this.sendConsoleCommand('help')}\n                    />\n\n                    <FormControl>\n                        <InputLabel id=\"weblog-select-label\">\n                            Weblog Level\n                        </InputLabel>\n                        <Select\n                            labelId=\"weblog-select-label\"\n                            id=\"weblog-select\"\n                            value={this.state.weblogLevel}\n                            onChange={(event) => this.onWebLogLevelChanged(event)}\n                        // labelWidth={labelWidth}\n                        >\n                            <MenuItem value={1}>Error Messages</MenuItem>\n                            <MenuItem value={2}>Error and Info</MenuItem>\n                            <MenuItem value={3}>Error, Info and Debug</MenuItem>\n                            <MenuItem value={4}>Error, Info and More Debug</MenuItem>\n                        </Select>\n                    </FormControl>\n\n                </Box>\n                <Terminal\n                    className={classes.terminal}\n                    ref={this.terminal}\n                    commands={this.commands}\n                    welcomeMessage={'Console to ' + this.state.deviceName + '. Type help to see all commands. All commands are lowercase only'}\n                    promptLabel={`${this.toCamelCase(this.state.deviceName)}>`}\n                />\n            </Box>\n        )\n\n    }\n}\n\nexport default withStyles(styles)(Console)","/*\n\n  Copyright (C) 2019  Shantur Rathore\n  \n  This program is free software: you can redistribute it and/or modify\n  it under the terms of the GNU General Public License as published by\n  the Free Software Foundation, either version 3 of the License, or\n  (at your option) any later version.\n  This program is distributed in the hope that it will be useful,\n  but WITHOUT ANY WARRANTY; without even the implied warranty of\n  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n  GNU General Public License for more details.\n  You should have received a copy of the GNU General Public License\n  along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\n*/\nclass AppConfig {\n\n\n    constructor() {\n        this.appConfig = \"appConfig\" in localStorage ? JSON.parse(localStorage.getItem('appConfig')) : {};\n        this.appSessionConfig = \"appSessionConfig\" in sessionStorage ? JSON.parse(localStorage.getItem('appConfigSession')) : {};\n    }\n\n    saveSessionConfig() {\n        sessionStorage.setItem('appSessionConfig', JSON.stringify(this.appSessionConfig));\n    }\n\n    saveAppConfig() {\n        localStorage.setItem('appConfig', JSON.stringify(this.appConfig));\n    }\n\n    putSessionConfig(key, value) {\n        this.appSessionConfig[key] = value\n        this.saveSessionConfig()\n    }\n\n    putAppConfig(key, value) {\n        this.appConfig[key] = value\n        this.saveAppConfig()\n    }\n\n    getSessionConfig(key) {\n        return this.appSessionConfig[key]\n    }\n\n    getAppConfig(key) {\n        return this.appConfig[key]\n    }\n}\n\nexport default AppConfig","/*\n\n  Copyright (C) 2019  Shantur Rathore\n  \n  This program is free software: you can redistribute it and/or modify\n  it under the terms of the GNU General Public License as published by\n  the Free Software Foundation, either version 3 of the License, or\n  (at your option) any later version.\n  This program is distributed in the hope that it will be useful,\n  but WITHOUT ANY WARRANTY; without even the implied warranty of\n  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n  GNU General Public License for more details.\n  You should have received a copy of the GNU General Public License\n  along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\n*/\nimport React, { Component } from 'react';\nimport { withStyles } from '@material-ui/core/styles';\nimport Drawer from '@material-ui/core/Drawer';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport List from '@material-ui/core/List';\nimport Typography from '@material-ui/core/Typography';\nimport Divider from '@material-ui/core/Divider';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport DeveloperBoardIcon from '@material-ui/icons/DeveloperBoard';\nimport InfoIcon from '@material-ui/icons/Info';\nimport FavoriteIcon from '@material-ui/icons/Favorite';\nimport SearchIcon from '@material-ui/icons/Search';\nimport Version from './version.json'\n\nimport { Route, Link, Switch, HashRouter as Router, Redirect } from 'react-router-dom';\nimport ScrollToTop from 'react-router-scroll-top'\n\nimport Devices from './Screens/Devices';\nimport DeviceManager from './DeviceManagement/DeviceManager';\nimport DeviceDetails from './Screens/DeviceDetails';\nimport DeviceSettings from './Screens/DeviceSettings';\nimport FindDevices from './Screens/FindDevices';\nimport Console from './Screens/Console'\nimport AppConfig from './Configuration/AppConfig'\n\n\nconst drawerWidth = 240;\n\nconst styles = theme => ({\n  root: {\n    display: 'flex',\n    flexBasis: \"100%\",\n    flexGrow: 0,\n    flexShrink: 1,\n    height: \"100vh\",\n    overflow: \"hidden\",\n  },\n  appBar: {\n    width: `calc(100% - ${drawerWidth}px)`,\n    marginLeft: drawerWidth,\n  },\n  drawer: {\n    width: drawerWidth,\n    flexShrink: 0,\n  },\n  drawerPaper: {\n    width: drawerWidth,\n  },\n  title: {\n    color: theme.palette.text.secondary,\n    marginBottom: theme.spacing(0.5),\n    '&:hover': {\n      color: theme.palette.primary.main,\n    },\n  },\n  toolbar: {\n    ...theme.mixins.toolbar,\n    paddingLeft: theme.spacing(3),\n    display: 'flex',\n    // flexGrow: 1,\n    flexDirection: 'column',\n    alignItems: 'flex-start',\n    justifyContent: 'center',\n  },\n  content: {\n    flexBasis: \"100%\",\n    flexGrow: 1,\n    flexShrink: 1,\n    height: \"100vh\",\n    justifyContent: \"center\",\n    backgroundColor: theme.palette.background.default,\n    padding: theme.spacing(3),\n    overflow: \"hidden\",\n  },\n  nested: {\n    paddingLeft: theme.spacing(4),\n  },\n});\n\nconst deviceGroups = [\n  {\n  //   name: 'All',\n  //   link: '/devices/all',\n  //   icon: <BorderAllIcon/>,\n  // }, {\n  //   name: 'Favourites',\n  //   link: '/devices/favs',\n  //   icon: <FavoriteIcon/>,\n  }  \n]\n\nconst mainMenuItems = [\n  {\n    name: 'Devices',\n    link: '/devices',\n    icon: <DeveloperBoardIcon/>,\n    // children: deviceGroups,\n  }, {\n    name: 'Discover Devices',\n    link: '/findDevices',\n    icon: <SearchIcon/>,\n  // }, {\n  //   name: 'About',\n  //   link: '/about',\n  //   icon: <InfoIcon/>,\n  }\n]\n\nconst deviceManager = new DeviceManager();\n\nclass App extends Component {\n\n  constructor(props) {\n    super(props)\n    this.appConfig = new AppConfig()\n  }\n\n  renderChildItems(item) {\n    const { classes } = this.props;\n\n    if (item.children && item.children.length > 0) {\n      return item.children.map((child, index) => {\n        return(\n          <Link to={child.link}>\n            <ListItem button key={child.name} className={classes.nested}>\n              <ListItemIcon>{child.icon}</ListItemIcon>\n              <ListItemText primary={child.name} />\n            </ListItem>  \n          </Link>\n        )\n      })\n    } \n  }\n\n\n  render() {\n\n    console.log(\"RuntimeConfig %O\", window.runtimeConfig)\n\n    const { classes } = this.props;\n\n    const listItems = mainMenuItems.map((item, index) => {\n      return (\n        <div>\n        <Link to={item.link} key={item.link} >\n          <ListItem button key={item.name}>\n            <ListItemIcon>{item.icon}</ListItemIcon>\n            <ListItemText primary={item.name} />\n          </ListItem>\n        </Link>\n\n        {this.renderChildItems(item)}\n        <Divider />\n        </div>\n      )\n    });\n\n\n    return (\n      <div className={classes.root}>\n        <Router>\n          <ScrollToTop>\n          <CssBaseline />\n          <AppBar position=\"fixed\" className={classes.appBar}>\n            <Toolbar>\n              <Typography variant=\"h6\" noWrap>\n                TasUI\n              </Typography>\n            </Toolbar>\n          </AppBar>\n          <Drawer\n          className={classes.drawer}\n          variant=\"permanent\"\n          classes={{\n            paper: classes.drawerPaper,\n          }}\n          anchor=\"left\"\n        >\n          <div className={classes.toolbar} >\n            <Typography variant=\"h6\" noWrap className={classes.title}>\n                TasUI\n            </Typography>\n            <Link variant=\"subtitle2\" noWrap onClick={() => window.open(`https://github.com/IOTReboot/TasUI/tree/${process.env.REACT_APP_GIT_SHA}`)}>\n              {Version.versionNumber}-{Version.versionName} {process.env.REACT_APP_GIT_BRANCH} ({process.env.REACT_APP_GIT_SHA})\n            </Link>\n          </div>\n          <Divider />\n          <List>\n            {listItems}\n          </List>\n        </Drawer>\n          <main className={classes.content}>\n            <div className={classes.toolbar} />\n              <div>\n            <Switch className={classes.content}>\n              <Route exact path=\"/findDevices\" render={(props) => <FindDevices {...props} deviceManager={deviceManager} appConfig={this.appConfig} />} />\n              <Route exact path=\"/devices\" render={(props) => <Devices {...props} deviceManager={deviceManager} appConfig={this.appConfig} />} />\n              <Route path=\"/details/:mac\" render={(props) => <DeviceDetails {...props} deviceManager={deviceManager} appConfig={this.appConfig} />} />\n              <Route path=\"/settings/:mac\" render={(props) => <DeviceSettings {...props} deviceManager={deviceManager} appConfig={this.appConfig} />} />\n              <Route path=\"/console/:mac\" render={(props) => <Console {...props} deviceManager={deviceManager} appConfig={this.appConfig} />} />\n              <Redirect to=\"/devices\" />\n            </Switch>\n            </div>\n          </main>\n          </ScrollToTop>\n        </Router>\n      </div>\n    );\n  }\n}\n\nexport default withStyles(styles)(App)","/*\n\n  Copyright (C) 2019  Shantur Rathore\n  \n  This program is free software: you can redistribute it and/or modify\n  it under the terms of the GNU General Public License as published by\n  the Free Software Foundation, either version 3 of the License, or\n  (at your option) any later version.\n  This program is distributed in the hope that it will be useful,\n  but WITHOUT ANY WARRANTY; without even the implied warranty of\n  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n  GNU General Public License for more details.\n  You should have received a copy of the GNU General Public License\n  along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\n*/\n\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport './index.css';\nimport { SnackbarProvider } from 'notistack';\n\n\nReactDOM.render(\n\n  <SnackbarProvider maxSnack={5}>\n    <App />\n  </SnackbarProvider>,\n  document.getElementById('root')\n\n);\n"],"sourceRoot":""}